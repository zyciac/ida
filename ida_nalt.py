# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""
IDA Plugin SDK API wrapper: nalt
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ida_nalt', [dirname(__file__)])
        except ImportError:
            import _ida_nalt
            return _ida_nalt
        if fp is not None:
            try:
                _mod = imp.load_module('_ida_nalt', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ida_nalt = swig_import_helper()
    del swig_import_helper
else:
    import _ida_nalt
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


import ida_idaapi

import sys
_BC695 = sys.modules["__main__"].IDAPYTHON_COMPAT_695_API

if _BC695:






    def bc695redef(func):
        func.func_dict["bc695redef"] = True
        return func

class custom_data_type_ids_fids_array(object):
    """
    Proxy of C++ wrapped_array_t<(int16,8)> class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    data = _swig_property(_ida_nalt.custom_data_type_ids_fids_array_data_get)
    def __init__(self, *args):
        """
        __init__(self, data) -> custom_data_type_ids_fids_array
        """
        this = _ida_nalt.new_custom_data_type_ids_fids_array(*args)
        try: self.this.append(this)
        except: self.this = this
    def __len__(self, *args):
        """
        __len__(self) -> size_t
        """
        return _ida_nalt.custom_data_type_ids_fids_array___len__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, i) -> short const &
        """
        return _ida_nalt.custom_data_type_ids_fids_array___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, i, v)
        """
        return _ida_nalt.custom_data_type_ids_fids_array___setitem__(self, *args)

    __iter__ = ida_idaapi._bounded_getitem_iterator

    __swig_destroy__ = _ida_nalt.delete_custom_data_type_ids_fids_array
    __del__ = lambda self : None;
custom_data_type_ids_fids_array_swigregister = _ida_nalt.custom_data_type_ids_fids_array_swigregister
custom_data_type_ids_fids_array_swigregister(custom_data_type_ids_fids_array)

class strpath_ids_array(object):
    """
    Proxy of C++ wrapped_array_t<(tid_t,32)> class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    data = _swig_property(_ida_nalt.strpath_ids_array_data_get)
    def __init__(self, *args):
        """
        __init__(self, data) -> strpath_ids_array
        """
        this = _ida_nalt.new_strpath_ids_array(*args)
        try: self.this.append(this)
        except: self.this = this
    def __len__(self, *args):
        """
        __len__(self) -> size_t
        """
        return _ida_nalt.strpath_ids_array___len__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, i) -> unsigned long long const &
        """
        return _ida_nalt.strpath_ids_array___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, i, v)
        """
        return _ida_nalt.strpath_ids_array___setitem__(self, *args)

    __iter__ = ida_idaapi._bounded_getitem_iterator

    __swig_destroy__ = _ida_nalt.delete_strpath_ids_array
    __del__ = lambda self : None;
strpath_ids_array_swigregister = _ida_nalt.strpath_ids_array_swigregister
strpath_ids_array_swigregister(strpath_ids_array)

NALT_SWITCH = _ida_nalt.NALT_SWITCH
NALT_STRUCT = _ida_nalt.NALT_STRUCT
NALT_AFLAGS = _ida_nalt.NALT_AFLAGS
NALT_LINNUM = _ida_nalt.NALT_LINNUM
NALT_ABSBASE = _ida_nalt.NALT_ABSBASE
NALT_ENUM0 = _ida_nalt.NALT_ENUM0
NALT_ENUM1 = _ida_nalt.NALT_ENUM1
NALT_PURGE = _ida_nalt.NALT_PURGE
NALT_STRTYPE = _ida_nalt.NALT_STRTYPE
NALT_ALIGN = _ida_nalt.NALT_ALIGN
NALT_COLOR = _ida_nalt.NALT_COLOR
NSUP_CMT = _ida_nalt.NSUP_CMT
NSUP_REPCMT = _ida_nalt.NSUP_REPCMT
NSUP_FOP1 = _ida_nalt.NSUP_FOP1
NSUP_FOP2 = _ida_nalt.NSUP_FOP2
NSUP_JINFO = _ida_nalt.NSUP_JINFO
NSUP_ARRAY = _ida_nalt.NSUP_ARRAY
NSUP_OMFGRP = _ida_nalt.NSUP_OMFGRP
NSUP_FOP3 = _ida_nalt.NSUP_FOP3
NSUP_SWITCH = _ida_nalt.NSUP_SWITCH
NSUP_REF0 = _ida_nalt.NSUP_REF0
NSUP_REF1 = _ida_nalt.NSUP_REF1
NSUP_REF2 = _ida_nalt.NSUP_REF2
NSUP_OREF0 = _ida_nalt.NSUP_OREF0
NSUP_OREF1 = _ida_nalt.NSUP_OREF1
NSUP_OREF2 = _ida_nalt.NSUP_OREF2
NSUP_STROFF0 = _ida_nalt.NSUP_STROFF0
NSUP_STROFF1 = _ida_nalt.NSUP_STROFF1
NSUP_SEGTRANS = _ida_nalt.NSUP_SEGTRANS
NSUP_FOP4 = _ida_nalt.NSUP_FOP4
NSUP_FOP5 = _ida_nalt.NSUP_FOP5
NSUP_FOP6 = _ida_nalt.NSUP_FOP6
NSUP_REF3 = _ida_nalt.NSUP_REF3
NSUP_REF4 = _ida_nalt.NSUP_REF4
NSUP_REF5 = _ida_nalt.NSUP_REF5
NSUP_OREF3 = _ida_nalt.NSUP_OREF3
NSUP_OREF4 = _ida_nalt.NSUP_OREF4
NSUP_OREF5 = _ida_nalt.NSUP_OREF5
NSUP_XREFPOS = _ida_nalt.NSUP_XREFPOS
NSUP_CUSTDT = _ida_nalt.NSUP_CUSTDT
NSUP_GROUPS = _ida_nalt.NSUP_GROUPS
NSUP_ARGEAS = _ida_nalt.NSUP_ARGEAS
NSUP_FOP7 = _ida_nalt.NSUP_FOP7
NSUP_FOP8 = _ida_nalt.NSUP_FOP8
NSUP_REF6 = _ida_nalt.NSUP_REF6
NSUP_REF7 = _ida_nalt.NSUP_REF7
NSUP_OREF6 = _ida_nalt.NSUP_OREF6
NSUP_OREF7 = _ida_nalt.NSUP_OREF7
NSUP_POINTS = _ida_nalt.NSUP_POINTS
NSUP_MANUAL = _ida_nalt.NSUP_MANUAL
NSUP_TYPEINFO = _ida_nalt.NSUP_TYPEINFO
NSUP_REGVAR = _ida_nalt.NSUP_REGVAR
NSUP_LLABEL = _ida_nalt.NSUP_LLABEL
NSUP_REGARG = _ida_nalt.NSUP_REGARG
NSUP_FTAILS = _ida_nalt.NSUP_FTAILS
NSUP_GROUP = _ida_nalt.NSUP_GROUP
NSUP_OPTYPES = _ida_nalt.NSUP_OPTYPES
NALT_CREF_TO = _ida_nalt.NALT_CREF_TO
NALT_CREF_FROM = _ida_nalt.NALT_CREF_FROM
NALT_DREF_TO = _ida_nalt.NALT_DREF_TO
NALT_DREF_FROM = _ida_nalt.NALT_DREF_FROM
NSUP_GR_INFO = _ida_nalt.NSUP_GR_INFO
NALT_GR_LAYX = _ida_nalt.NALT_GR_LAYX
NSUP_GR_LAYT = _ida_nalt.NSUP_GR_LAYT
PATCH_TAG = _ida_nalt.PATCH_TAG

def ea2node(*args):
  """
  ea2node(ea) -> nodeidx_t
  """
  return _ida_nalt.ea2node(*args)

def node2ea(*args):
  """
  node2ea(ndx) -> ea_t
  """
  return _ida_nalt.node2ea(*args)

def getnode(*args):
  """
  getnode(ea) -> netnode
  """
  return _ida_nalt.getnode(*args)
AFL_LINNUM = _ida_nalt.AFL_LINNUM
AFL_USERSP = _ida_nalt.AFL_USERSP
AFL_PUBNAM = _ida_nalt.AFL_PUBNAM
AFL_WEAKNAM = _ida_nalt.AFL_WEAKNAM
AFL_HIDDEN = _ida_nalt.AFL_HIDDEN
AFL_MANUAL = _ida_nalt.AFL_MANUAL
AFL_NOBRD = _ida_nalt.AFL_NOBRD
AFL_ZSTROFF = _ida_nalt.AFL_ZSTROFF
AFL_BNOT0 = _ida_nalt.AFL_BNOT0
AFL_BNOT1 = _ida_nalt.AFL_BNOT1
AFL_LIB = _ida_nalt.AFL_LIB
AFL_TI = _ida_nalt.AFL_TI
AFL_TI0 = _ida_nalt.AFL_TI0
AFL_TI1 = _ida_nalt.AFL_TI1
AFL_LNAME = _ida_nalt.AFL_LNAME
AFL_TILCMT = _ida_nalt.AFL_TILCMT
AFL_LZERO0 = _ida_nalt.AFL_LZERO0
AFL_LZERO1 = _ida_nalt.AFL_LZERO1
AFL_COLORED = _ida_nalt.AFL_COLORED
AFL_TERSESTR = _ida_nalt.AFL_TERSESTR
AFL_SIGN0 = _ida_nalt.AFL_SIGN0
AFL_SIGN1 = _ida_nalt.AFL_SIGN1
AFL_NORET = _ida_nalt.AFL_NORET
AFL_FIXEDSPD = _ida_nalt.AFL_FIXEDSPD
AFL_ALIGNFLOW = _ida_nalt.AFL_ALIGNFLOW
AFL_USERTI = _ida_nalt.AFL_USERTI
AFL_RETFP = _ida_nalt.AFL_RETFP
AFL_USEMODSP = _ida_nalt.AFL_USEMODSP
AFL_NOTCODE = _ida_nalt.AFL_NOTCODE
AFL_NOTPROC = _ida_nalt.AFL_NOTPROC

def set_aflags(*args):
  """
  set_aflags(ea, flags)
  """
  return _ida_nalt.set_aflags(*args)

def set_abits(*args):
  """
  set_abits(ea, bits)
  """
  return _ida_nalt.set_abits(*args)

def clr_abits(*args):
  """
  clr_abits(ea, bits)
  """
  return _ida_nalt.clr_abits(*args)

def get_aflags(*args):
  """
  get_aflags(ea) -> uint32
  """
  return _ida_nalt.get_aflags(*args)

def del_aflags(*args):
  """
  del_aflags(ea)
  """
  return _ida_nalt.del_aflags(*args)

def is_hidden_item(*args):
  """
  is_hidden_item(ea) -> bool
  """
  return _ida_nalt.is_hidden_item(*args)

def hide_item(*args):
  """
  hide_item(ea)
  """
  return _ida_nalt.hide_item(*args)

def unhide_item(*args):
  """
  unhide_item(ea)
  """
  return _ida_nalt.unhide_item(*args)

def is_hidden_border(*args):
  """
  is_hidden_border(ea) -> bool
  """
  return _ida_nalt.is_hidden_border(*args)

def hide_border(*args):
  """
  hide_border(ea)
  """
  return _ida_nalt.hide_border(*args)

def unhide_border(*args):
  """
  unhide_border(ea)
  """
  return _ida_nalt.unhide_border(*args)

def uses_modsp(*args):
  """
  uses_modsp(ea) -> bool
  """
  return _ida_nalt.uses_modsp(*args)

def set_usemodsp(*args):
  """
  set_usemodsp(ea)
  """
  return _ida_nalt.set_usemodsp(*args)

def clr_usemodsp(*args):
  """
  clr_usemodsp(ea)
  """
  return _ida_nalt.clr_usemodsp(*args)

def is_zstroff(*args):
  """
  is_zstroff(ea) -> bool
  """
  return _ida_nalt.is_zstroff(*args)

def set_zstroff(*args):
  """
  set_zstroff(ea)
  """
  return _ida_nalt.set_zstroff(*args)

def clr_zstroff(*args):
  """
  clr_zstroff(ea)
  """
  return _ida_nalt.clr_zstroff(*args)

def is__bnot0(*args):
  """
  is__bnot0(ea) -> bool
  """
  return _ida_nalt.is__bnot0(*args)

def set__bnot0(*args):
  """
  set__bnot0(ea)
  """
  return _ida_nalt.set__bnot0(*args)

def clr__bnot0(*args):
  """
  clr__bnot0(ea)
  """
  return _ida_nalt.clr__bnot0(*args)

def is__bnot1(*args):
  """
  is__bnot1(ea) -> bool
  """
  return _ida_nalt.is__bnot1(*args)

def set__bnot1(*args):
  """
  set__bnot1(ea)
  """
  return _ida_nalt.set__bnot1(*args)

def clr__bnot1(*args):
  """
  clr__bnot1(ea)
  """
  return _ida_nalt.clr__bnot1(*args)

def is_libitem(*args):
  """
  is_libitem(ea) -> bool
  """
  return _ida_nalt.is_libitem(*args)

def set_libitem(*args):
  """
  set_libitem(ea)
  """
  return _ida_nalt.set_libitem(*args)

def clr_libitem(*args):
  """
  clr_libitem(ea)
  """
  return _ida_nalt.clr_libitem(*args)

def has_ti(*args):
  """
  has_ti(ea) -> bool
  """
  return _ida_nalt.has_ti(*args)

def set_has_ti(*args):
  """
  set_has_ti(ea)
  """
  return _ida_nalt.set_has_ti(*args)

def clr_has_ti(*args):
  """
  clr_has_ti(ea)
  """
  return _ida_nalt.clr_has_ti(*args)

def has_ti0(*args):
  """
  has_ti0(ea) -> bool
  """
  return _ida_nalt.has_ti0(*args)

def set_has_ti0(*args):
  """
  set_has_ti0(ea)
  """
  return _ida_nalt.set_has_ti0(*args)

def clr_has_ti0(*args):
  """
  clr_has_ti0(ea)
  """
  return _ida_nalt.clr_has_ti0(*args)

def has_ti1(*args):
  """
  has_ti1(ea) -> bool
  """
  return _ida_nalt.has_ti1(*args)

def set_has_ti1(*args):
  """
  set_has_ti1(ea)
  """
  return _ida_nalt.set_has_ti1(*args)

def clr_has_ti1(*args):
  """
  clr_has_ti1(ea)
  """
  return _ida_nalt.clr_has_ti1(*args)

def has_lname(*args):
  """
  has_lname(ea) -> bool
  """
  return _ida_nalt.has_lname(*args)

def set_has_lname(*args):
  """
  set_has_lname(ea)
  """
  return _ida_nalt.set_has_lname(*args)

def clr_has_lname(*args):
  """
  clr_has_lname(ea)
  """
  return _ida_nalt.clr_has_lname(*args)

def is_tilcmt(*args):
  """
  is_tilcmt(ea) -> bool
  """
  return _ida_nalt.is_tilcmt(*args)

def set_tilcmt(*args):
  """
  set_tilcmt(ea)
  """
  return _ida_nalt.set_tilcmt(*args)

def clr_tilcmt(*args):
  """
  clr_tilcmt(ea)
  """
  return _ida_nalt.clr_tilcmt(*args)

def is_usersp(*args):
  """
  is_usersp(ea) -> bool
  """
  return _ida_nalt.is_usersp(*args)

def set_usersp(*args):
  """
  set_usersp(ea)
  """
  return _ida_nalt.set_usersp(*args)

def clr_usersp(*args):
  """
  clr_usersp(ea)
  """
  return _ida_nalt.clr_usersp(*args)

def is_lzero0(*args):
  """
  is_lzero0(ea) -> bool
  """
  return _ida_nalt.is_lzero0(*args)

def set_lzero0(*args):
  """
  set_lzero0(ea)
  """
  return _ida_nalt.set_lzero0(*args)

def clr_lzero0(*args):
  """
  clr_lzero0(ea)
  """
  return _ida_nalt.clr_lzero0(*args)

def is_lzero1(*args):
  """
  is_lzero1(ea) -> bool
  """
  return _ida_nalt.is_lzero1(*args)

def set_lzero1(*args):
  """
  set_lzero1(ea)
  """
  return _ida_nalt.set_lzero1(*args)

def clr_lzero1(*args):
  """
  clr_lzero1(ea)
  """
  return _ida_nalt.clr_lzero1(*args)

def is_colored_item(*args):
  """
  is_colored_item(ea) -> bool
  """
  return _ida_nalt.is_colored_item(*args)

def set_colored_item(*args):
  """
  set_colored_item(ea)
  """
  return _ida_nalt.set_colored_item(*args)

def clr_colored_item(*args):
  """
  clr_colored_item(ea)
  """
  return _ida_nalt.clr_colored_item(*args)

def is_terse_struc(*args):
  """
  is_terse_struc(ea) -> bool
  """
  return _ida_nalt.is_terse_struc(*args)

def set_terse_struc(*args):
  """
  set_terse_struc(ea)
  """
  return _ida_nalt.set_terse_struc(*args)

def clr_terse_struc(*args):
  """
  clr_terse_struc(ea)
  """
  return _ida_nalt.clr_terse_struc(*args)

def is__invsign0(*args):
  """
  is__invsign0(ea) -> bool
  """
  return _ida_nalt.is__invsign0(*args)

def set__invsign0(*args):
  """
  set__invsign0(ea)
  """
  return _ida_nalt.set__invsign0(*args)

def clr__invsign0(*args):
  """
  clr__invsign0(ea)
  """
  return _ida_nalt.clr__invsign0(*args)

def is__invsign1(*args):
  """
  is__invsign1(ea) -> bool
  """
  return _ida_nalt.is__invsign1(*args)

def set__invsign1(*args):
  """
  set__invsign1(ea)
  """
  return _ida_nalt.set__invsign1(*args)

def clr__invsign1(*args):
  """
  clr__invsign1(ea)
  """
  return _ida_nalt.clr__invsign1(*args)

def is_noret(*args):
  """
  is_noret(ea) -> bool
  """
  return _ida_nalt.is_noret(*args)

def set_noret(*args):
  """
  set_noret(ea)
  """
  return _ida_nalt.set_noret(*args)

def clr_noret(*args):
  """
  clr_noret(ea)
  """
  return _ida_nalt.clr_noret(*args)

def is_fixed_spd(*args):
  """
  is_fixed_spd(ea) -> bool
  """
  return _ida_nalt.is_fixed_spd(*args)

def set_fixed_spd(*args):
  """
  set_fixed_spd(ea)
  """
  return _ida_nalt.set_fixed_spd(*args)

def clr_fixed_spd(*args):
  """
  clr_fixed_spd(ea)
  """
  return _ida_nalt.clr_fixed_spd(*args)

def is_align_flow(*args):
  """
  is_align_flow(ea) -> bool
  """
  return _ida_nalt.is_align_flow(*args)

def set_align_flow(*args):
  """
  set_align_flow(ea)
  """
  return _ida_nalt.set_align_flow(*args)

def clr_align_flow(*args):
  """
  clr_align_flow(ea)
  """
  return _ida_nalt.clr_align_flow(*args)

def is_userti(*args):
  """
  is_userti(ea) -> bool
  """
  return _ida_nalt.is_userti(*args)

def set_userti(*args):
  """
  set_userti(ea)
  """
  return _ida_nalt.set_userti(*args)

def clr_userti(*args):
  """
  clr_userti(ea)
  """
  return _ida_nalt.clr_userti(*args)

def is_retfp(*args):
  """
  is_retfp(ea) -> bool
  """
  return _ida_nalt.is_retfp(*args)

def set_retfp(*args):
  """
  set_retfp(ea)
  """
  return _ida_nalt.set_retfp(*args)

def clr_retfp(*args):
  """
  clr_retfp(ea)
  """
  return _ida_nalt.clr_retfp(*args)

def is_notproc(*args):
  """
  is_notproc(ea) -> bool
  """
  return _ida_nalt.is_notproc(*args)

def set_notproc(*args):
  """
  set_notproc(ea)
  """
  return _ida_nalt.set_notproc(*args)

def clr_notproc(*args):
  """
  clr_notproc(ea)
  """
  return _ida_nalt.clr_notproc(*args)

def set_notcode(*args):
  """
  set_notcode(ea)
  """
  return _ida_nalt.set_notcode(*args)

def clr_notcode(*args):
  """
  clr_notcode(ea)
  """
  return _ida_nalt.clr_notcode(*args)

def is_notcode(*args):
  """
  is_notcode(ea) -> bool
  """
  return _ida_nalt.is_notcode(*args)

def set_visible_item(*args):
  """
  set_visible_item(ea, visible)
  """
  return _ida_nalt.set_visible_item(*args)

def is_visible_item(*args):
  """
  is_visible_item(ea) -> bool
  """
  return _ida_nalt.is_visible_item(*args)

def is_finally_visible_item(*args):
  """
  is_finally_visible_item(ea) -> bool
  """
  return _ida_nalt.is_finally_visible_item(*args)

def set_source_linnum(*args):
  """
  set_source_linnum(ea, lnnum)
  """
  return _ida_nalt.set_source_linnum(*args)

def get_source_linnum(*args):
  """
  get_source_linnum(ea) -> uval_t
  """
  return _ida_nalt.get_source_linnum(*args)

def del_source_linnum(*args):
  """
  del_source_linnum(ea)
  """
  return _ida_nalt.del_source_linnum(*args)

def get_absbase(*args):
  """
  get_absbase(ea) -> ea_t
  """
  return _ida_nalt.get_absbase(*args)

def set_absbase(*args):
  """
  set_absbase(ea, x)
  """
  return _ida_nalt.set_absbase(*args)

def del_absbase(*args):
  """
  del_absbase(ea)
  """
  return _ida_nalt.del_absbase(*args)

def get_ind_purged(*args):
  """
  get_ind_purged(ea) -> ea_t
  """
  return _ida_nalt.get_ind_purged(*args)

def del_ind_purged(*args):
  """
  del_ind_purged(ea)
  """
  return _ida_nalt.del_ind_purged(*args)

def get_str_type(*args):
  """
  get_str_type(ea) -> uint32
  """
  return _ida_nalt.get_str_type(*args)

def set_str_type(*args):
  """
  set_str_type(ea, x)
  """
  return _ida_nalt.set_str_type(*args)

def del_str_type(*args):
  """
  del_str_type(ea)
  """
  return _ida_nalt.del_str_type(*args)
STRWIDTH_1B = _ida_nalt.STRWIDTH_1B
STRWIDTH_2B = _ida_nalt.STRWIDTH_2B
STRWIDTH_4B = _ida_nalt.STRWIDTH_4B
STRWIDTH_MASK = _ida_nalt.STRWIDTH_MASK
STRLYT_TERMCHR = _ida_nalt.STRLYT_TERMCHR
STRLYT_PASCAL1 = _ida_nalt.STRLYT_PASCAL1
STRLYT_PASCAL2 = _ida_nalt.STRLYT_PASCAL2
STRLYT_PASCAL4 = _ida_nalt.STRLYT_PASCAL4
STRLYT_MASK = _ida_nalt.STRLYT_MASK
STRLYT_SHIFT = _ida_nalt.STRLYT_SHIFT
STRTYPE_TERMCHR = _ida_nalt.STRTYPE_TERMCHR
STRTYPE_C = _ida_nalt.STRTYPE_C
STRTYPE_C_16 = _ida_nalt.STRTYPE_C_16
STRTYPE_C_32 = _ida_nalt.STRTYPE_C_32
STRTYPE_PASCAL = _ida_nalt.STRTYPE_PASCAL
STRTYPE_PASCAL_16 = _ida_nalt.STRTYPE_PASCAL_16
STRTYPE_LEN2 = _ida_nalt.STRTYPE_LEN2
STRTYPE_LEN2_16 = _ida_nalt.STRTYPE_LEN2_16
STRTYPE_LEN4 = _ida_nalt.STRTYPE_LEN4
STRTYPE_LEN4_16 = _ida_nalt.STRTYPE_LEN4_16

def get_str_type_code(*args):
  """
  get_str_type_code(strtype) -> uchar
  """
  return _ida_nalt.get_str_type_code(*args)

def get_str_term1(*args):
  """
  get_str_term1(strtype) -> char
  """
  return _ida_nalt.get_str_term1(*args)

def get_str_term2(*args):
  """
  get_str_term2(strtype) -> char
  """
  return _ida_nalt.get_str_term2(*args)

def get_str_encoding_idx(*args):
  """
  get_str_encoding_idx(strtype) -> uchar
  """
  return _ida_nalt.get_str_encoding_idx(*args)

def is_pascal(*args):
  """
  is_pascal(strtype) -> bool
  """
  return _ida_nalt.is_pascal(*args)
STRENC_DEFAULT = _ida_nalt.STRENC_DEFAULT
STRENC_NONE = _ida_nalt.STRENC_NONE

def get_alignment(*args):
  """
  get_alignment(ea) -> uint32
  """
  return _ida_nalt.get_alignment(*args)

def set_alignment(*args):
  """
  set_alignment(ea, x)
  """
  return _ida_nalt.set_alignment(*args)

def del_alignment(*args):
  """
  del_alignment(ea)
  """
  return _ida_nalt.del_alignment(*args)

def set_item_color(*args):
  """
  set_item_color(ea, color)
  """
  return _ida_nalt.set_item_color(*args)

def get_item_color(*args):
  """
  get_item_color(ea) -> bgcolor_t
  """
  return _ida_nalt.get_item_color(*args)

def del_item_color(*args):
  """
  del_item_color(ea)
  """
  return _ida_nalt.del_item_color(*args)
class array_parameters_t(object):
    """
    Proxy of C++ array_parameters_t class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    flags = _swig_property(_ida_nalt.array_parameters_t_flags_get, _ida_nalt.array_parameters_t_flags_set)
    lineitems = _swig_property(_ida_nalt.array_parameters_t_lineitems_get, _ida_nalt.array_parameters_t_lineitems_set)
    alignment = _swig_property(_ida_nalt.array_parameters_t_alignment_get, _ida_nalt.array_parameters_t_alignment_set)
    def __init__(self, *args):
        """
        __init__(self) -> array_parameters_t
        """
        this = _ida_nalt.new_array_parameters_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_nalt.delete_array_parameters_t
    __del__ = lambda self : None;
array_parameters_t_swigregister = _ida_nalt.array_parameters_t_swigregister
array_parameters_t_swigregister(array_parameters_t)
AP_ALLOWDUPS = _ida_nalt.AP_ALLOWDUPS
AP_SIGNED = _ida_nalt.AP_SIGNED
AP_INDEX = _ida_nalt.AP_INDEX
AP_ARRAY = _ida_nalt.AP_ARRAY
AP_IDXBASEMASK = _ida_nalt.AP_IDXBASEMASK
AP_IDXDEC = _ida_nalt.AP_IDXDEC
AP_IDXHEX = _ida_nalt.AP_IDXHEX
AP_IDXOCT = _ida_nalt.AP_IDXOCT
AP_IDXBIN = _ida_nalt.AP_IDXBIN


def get_array_parameters(*args):
  """
  get_array_parameters(out, ea) -> ssize_t
  """
  return _ida_nalt.get_array_parameters(*args)

def set_array_parameters(*args):
  """
  set_array_parameters(ea, _in)
  """
  return _ida_nalt.set_array_parameters(*args)

def del_array_parameters(*args):
  """
  del_array_parameters(ea)
  """
  return _ida_nalt.del_array_parameters(*args)

def get_switch_parent(*args):
  """
  get_switch_parent(ea) -> ea_t
  """
  return _ida_nalt.get_switch_parent(*args)

def set_switch_parent(*args):
  """
  set_switch_parent(ea, x)
  """
  return _ida_nalt.set_switch_parent(*args)

def del_switch_parent(*args):
  """
  del_switch_parent(ea)
  """
  return _ida_nalt.del_switch_parent(*args)
class custom_data_type_ids_t(object):
    """
    Proxy of C++ custom_data_type_ids_t class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    dtid = _swig_property(_ida_nalt.custom_data_type_ids_t_dtid_get, _ida_nalt.custom_data_type_ids_t_dtid_set)
    fids = _swig_property(_ida_nalt.custom_data_type_ids_t_fids_get, _ida_nalt.custom_data_type_ids_t_fids_set)
    def __getFids(self, *args):
        """
        __getFids(self) -> custom_data_type_ids_fids_array
        """
        return _ida_nalt.custom_data_type_ids_t___getFids(self, *args)

    fids = property(__getFids)

    def __init__(self, *args):
        """
        __init__(self) -> custom_data_type_ids_t
        """
        this = _ida_nalt.new_custom_data_type_ids_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_nalt.delete_custom_data_type_ids_t
    __del__ = lambda self : None;
custom_data_type_ids_t_swigregister = _ida_nalt.custom_data_type_ids_t_swigregister
custom_data_type_ids_t_swigregister(custom_data_type_ids_t)


def get_custom_data_type_ids(*args):
  """
  get_custom_data_type_ids(cdis, ea) -> int
  """
  return _ida_nalt.get_custom_data_type_ids(*args)

def set_custom_data_type_ids(*args):
  """
  set_custom_data_type_ids(ea, cdis)
  """
  return _ida_nalt.set_custom_data_type_ids(*args)

def del_custom_data_type_ids(*args):
  """
  del_custom_data_type_ids(ea)
  """
  return _ida_nalt.del_custom_data_type_ids(*args)

def is_reftype_target_optional(*args):
  """
  is_reftype_target_optional(type) -> bool
  """
  return _ida_nalt.is_reftype_target_optional(*args)

def get_reftype_by_size(*args):
  """
  get_reftype_by_size(size) -> reftype_t
  """
  return _ida_nalt.get_reftype_by_size(*args)
class refinfo_t(object):
    """
    Proxy of C++ refinfo_t class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    target = _swig_property(_ida_nalt.refinfo_t_target_get, _ida_nalt.refinfo_t_target_set)
    base = _swig_property(_ida_nalt.refinfo_t_base_get, _ida_nalt.refinfo_t_base_set)
    tdelta = _swig_property(_ida_nalt.refinfo_t_tdelta_get, _ida_nalt.refinfo_t_tdelta_set)
    flags = _swig_property(_ida_nalt.refinfo_t_flags_get, _ida_nalt.refinfo_t_flags_set)
    def type(self, *args):
        """
        type(self) -> reftype_t
        """
        return _ida_nalt.refinfo_t_type(self, *args)

    def is_target_optional(self, *args):
        """
        is_target_optional(self) -> bool
        """
        return _ida_nalt.refinfo_t_is_target_optional(self, *args)

    def no_base_xref(self, *args):
        """
        no_base_xref(self) -> bool
        """
        return _ida_nalt.refinfo_t_no_base_xref(self, *args)

    def is_pastend(self, *args):
        """
        is_pastend(self) -> bool
        """
        return _ida_nalt.refinfo_t_is_pastend(self, *args)

    def is_rvaoff(self, *args):
        """
        is_rvaoff(self) -> bool
        """
        return _ida_nalt.refinfo_t_is_rvaoff(self, *args)

    def is_custom(self, *args):
        """
        is_custom(self) -> bool
        """
        return _ida_nalt.refinfo_t_is_custom(self, *args)

    def is_subtract(self, *args):
        """
        is_subtract(self) -> bool
        """
        return _ida_nalt.refinfo_t_is_subtract(self, *args)

    def is_signed(self, *args):
        """
        is_signed(self) -> bool
        """
        return _ida_nalt.refinfo_t_is_signed(self, *args)

    def set_type(self, *args):
        """
        set_type(self, t)
        """
        return _ida_nalt.refinfo_t_set_type(self, *args)

    def init(self, *args):
        """
        init(self, reft_and_flags, _base=0, _target=BADADDR, _tdelta=0)
        """
        return _ida_nalt.refinfo_t_init(self, *args)

    def __init__(self, *args):
        """
        __init__(self) -> refinfo_t
        """
        this = _ida_nalt.new_refinfo_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_nalt.delete_refinfo_t
    __del__ = lambda self : None;
refinfo_t_swigregister = _ida_nalt.refinfo_t_swigregister
refinfo_t_swigregister(refinfo_t)
cvar = _ida_nalt.cvar
V695_REF_OFF8 = cvar.V695_REF_OFF8
REF_OFF16 = cvar.REF_OFF16
REF_OFF32 = cvar.REF_OFF32
REF_LOW8 = cvar.REF_LOW8
REF_LOW16 = cvar.REF_LOW16
REF_HIGH8 = cvar.REF_HIGH8
REF_HIGH16 = cvar.REF_HIGH16
V695_REF_VHIGH = cvar.V695_REF_VHIGH
V695_REF_VLOW = cvar.V695_REF_VLOW
REF_OFF64 = cvar.REF_OFF64
REF_OFF8 = cvar.REF_OFF8
REF_LAST = cvar.REF_LAST
REFINFO_TYPE = _ida_nalt.REFINFO_TYPE
REFINFO_RVAOFF = _ida_nalt.REFINFO_RVAOFF
REFINFO_PASTEND = _ida_nalt.REFINFO_PASTEND
REFINFO_CUSTOM = _ida_nalt.REFINFO_CUSTOM
REFINFO_NOBASE = _ida_nalt.REFINFO_NOBASE
REFINFO_SUBTRACT = _ida_nalt.REFINFO_SUBTRACT
REFINFO_SIGNEDOP = _ida_nalt.REFINFO_SIGNEDOP


def find_custom_refinfo(*args):
  """
  find_custom_refinfo(name) -> int
  """
  return _ida_nalt.find_custom_refinfo(*args)

def get_custom_refinfo(*args):
  """
  get_custom_refinfo(crid) -> custom_refinfo_handler_t const *
  """
  return _ida_nalt.get_custom_refinfo(*args)
MAXSTRUCPATH = _ida_nalt.MAXSTRUCPATH
class strpath_t(object):
    """
    Proxy of C++ strpath_t class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    len = _swig_property(_ida_nalt.strpath_t_len_get, _ida_nalt.strpath_t_len_set)
    ids = _swig_property(_ida_nalt.strpath_t_ids_get, _ida_nalt.strpath_t_ids_set)
    delta = _swig_property(_ida_nalt.strpath_t_delta_get, _ida_nalt.strpath_t_delta_set)
    def __getIds(self, *args):
        """
        __getIds(self) -> strpath_ids_array
        """
        return _ida_nalt.strpath_t___getIds(self, *args)

    ids = property(__getIds)

    def __init__(self, *args):
        """
        __init__(self) -> strpath_t
        """
        this = _ida_nalt.new_strpath_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_nalt.delete_strpath_t
    __del__ = lambda self : None;
strpath_t_swigregister = _ida_nalt.strpath_t_swigregister
strpath_t_swigregister(strpath_t)

class enum_const_t(object):
    """
    Proxy of C++ enum_const_t class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    tid = _swig_property(_ida_nalt.enum_const_t_tid_get, _ida_nalt.enum_const_t_tid_set)
    serial = _swig_property(_ida_nalt.enum_const_t_serial_get, _ida_nalt.enum_const_t_serial_set)
    def __init__(self, *args):
        """
        __init__(self) -> enum_const_t
        """
        this = _ida_nalt.new_enum_const_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_nalt.delete_enum_const_t
    __del__ = lambda self : None;
enum_const_t_swigregister = _ida_nalt.enum_const_t_swigregister
enum_const_t_swigregister(enum_const_t)

class opinfo_t(object):
    """
    Proxy of C++ opinfo_t class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ri = _swig_property(_ida_nalt.opinfo_t_ri_get, _ida_nalt.opinfo_t_ri_set)
    tid = _swig_property(_ida_nalt.opinfo_t_tid_get, _ida_nalt.opinfo_t_tid_set)
    path = _swig_property(_ida_nalt.opinfo_t_path_get, _ida_nalt.opinfo_t_path_set)
    strtype = _swig_property(_ida_nalt.opinfo_t_strtype_get, _ida_nalt.opinfo_t_strtype_set)
    ec = _swig_property(_ida_nalt.opinfo_t_ec_get, _ida_nalt.opinfo_t_ec_set)
    cd = _swig_property(_ida_nalt.opinfo_t_cd_get, _ida_nalt.opinfo_t_cd_set)
    def __init__(self, *args):
        """
        __init__(self) -> opinfo_t
        """
        this = _ida_nalt.new_opinfo_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_nalt.delete_opinfo_t
    __del__ = lambda self : None;
opinfo_t_swigregister = _ida_nalt.opinfo_t_swigregister
opinfo_t_swigregister(opinfo_t)

class printop_t(object):
    """
    Proxy of C++ printop_t class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    flags = _swig_property(_ida_nalt.printop_t_flags_get, _ida_nalt.printop_t_flags_set)
    ti = _swig_property(_ida_nalt.printop_t_ti_get, _ida_nalt.printop_t_ti_set)
    is_ti_valid = _swig_property(_ida_nalt.printop_t_is_ti_valid_get, _ida_nalt.printop_t_is_ti_valid_set)
    suspop = _swig_property(_ida_nalt.printop_t_suspop_get, _ida_nalt.printop_t_suspop_set)
    def get_ti(self, *args):
        """
        get_ti(self) -> opinfo_t
        """
        return _ida_nalt.printop_t_get_ti(self, *args)

    def __init__(self, *args):
        """
        __init__(self) -> printop_t
        """
        this = _ida_nalt.new_printop_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_nalt.delete_printop_t
    __del__ = lambda self : None;
printop_t_swigregister = _ida_nalt.printop_t_swigregister
printop_t_swigregister(printop_t)


def set_refinfo_ex(*args):
  """
  set_refinfo_ex(ea, n, ri) -> int
  """
  return _ida_nalt.set_refinfo_ex(*args)

def set_refinfo(*args):
  """
  set_refinfo(ea, n, type, target=BADADDR, base=0, tdelta=0) -> int
  """
  return _ida_nalt.set_refinfo(*args)

def get_refinfo(*args):
  """
  get_refinfo(ri, ea, n) -> int
  """
  return _ida_nalt.get_refinfo(*args)

def del_refinfo(*args):
  """
  del_refinfo(ea, n) -> int
  """
  return _ida_nalt.del_refinfo(*args)

def get_tinfo(*args):
  """
  get_tinfo(tif, ea) -> bool
  """
  return _ida_nalt.get_tinfo(*args)

def set_tinfo(*args):
  """
  set_tinfo(ea, tif) -> bool
  """
  return _ida_nalt.set_tinfo(*args)

def del_tinfo(*args):
  """
  del_tinfo(ea)
  """
  return _ida_nalt.del_tinfo(*args)

def get_op_tinfo(*args):
  """
  get_op_tinfo(tif, ea, n) -> bool
  """
  return _ida_nalt.get_op_tinfo(*args)

def set_op_tinfo(*args):
  """
  set_op_tinfo(ea, n, tif) -> bool
  """
  return _ida_nalt.set_op_tinfo(*args)

def del_op_tinfo(*args):
  """
  del_op_tinfo(ea, n)
  """
  return _ida_nalt.del_op_tinfo(*args)
RIDX_FILE_FORMAT_NAME = _ida_nalt.RIDX_FILE_FORMAT_NAME
RIDX_SELECTORS = _ida_nalt.RIDX_SELECTORS
RIDX_GROUPS = _ida_nalt.RIDX_GROUPS
RIDX_H_PATH = _ida_nalt.RIDX_H_PATH
RIDX_C_MACROS = _ida_nalt.RIDX_C_MACROS
RIDX_SMALL_IDC_OLD = _ida_nalt.RIDX_SMALL_IDC_OLD
RIDX_NOTEPAD = _ida_nalt.RIDX_NOTEPAD
RIDX_INCLUDE = _ida_nalt.RIDX_INCLUDE
RIDX_SMALL_IDC = _ida_nalt.RIDX_SMALL_IDC
RIDX_DUALOP_GRAPH = _ida_nalt.RIDX_DUALOP_GRAPH
RIDX_DUALOP_TEXT = _ida_nalt.RIDX_DUALOP_TEXT
RIDX_MD5 = _ida_nalt.RIDX_MD5
RIDX_IDA_VERSION = _ida_nalt.RIDX_IDA_VERSION
RIDX_STR_ENCODINGS = _ida_nalt.RIDX_STR_ENCODINGS
RIDX_SRCDBG_PATHS = _ida_nalt.RIDX_SRCDBG_PATHS
RIDX_SELECTED_EXTLANG = _ida_nalt.RIDX_SELECTED_EXTLANG
RIDX_DBG_BINPATHS = _ida_nalt.RIDX_DBG_BINPATHS
RIDX_SHA256 = _ida_nalt.RIDX_SHA256
RIDX_ABINAME = _ida_nalt.RIDX_ABINAME
RIDX_ARCHIVE_PATH = _ida_nalt.RIDX_ARCHIVE_PATH
RIDX_PROBLEMS = _ida_nalt.RIDX_PROBLEMS

def get_input_file_path(*args):
  """
  get_input_file_path() -> ssize_t
  """
  return _ida_nalt.get_input_file_path(*args)

def get_root_filename(*args):
  """
  get_root_filename() -> ssize_t
  """
  return _ida_nalt.get_root_filename(*args)

def set_root_filename(*args):
  """
  set_root_filename(file)
  """
  return _ida_nalt.set_root_filename(*args)

def retrieve_input_file_size(*args):
  """
  retrieve_input_file_size() -> uint32
  """
  return _ida_nalt.retrieve_input_file_size(*args)

def retrieve_input_file_crc32(*args):
  """
  retrieve_input_file_crc32() -> uint32
  """
  return _ida_nalt.retrieve_input_file_crc32(*args)

def retrieve_input_file_md5(*args):
  """
  retrieve_input_file_md5() -> bool
  """
  return _ida_nalt.retrieve_input_file_md5(*args)

def retrieve_input_file_sha256(*args):
  """
  retrieve_input_file_sha256() -> bool
  """
  return _ida_nalt.retrieve_input_file_sha256(*args)

def get_asm_inc_file(*args):
  """
  get_asm_inc_file() -> ssize_t
  """
  return _ida_nalt.get_asm_inc_file(*args)

def set_asm_inc_file(*args):
  """
  set_asm_inc_file(file) -> bool
  """
  return _ida_nalt.set_asm_inc_file(*args)

def get_imagebase(*args):
  """
  get_imagebase() -> ea_t
  """
  return _ida_nalt.get_imagebase(*args)

def set_imagebase(*args):
  """
  set_imagebase(base)
  """
  return _ida_nalt.set_imagebase(*args)

def get_ids_modnode(*args):
  """
  get_ids_modnode() -> netnode
  """
  return _ida_nalt.get_ids_modnode(*args)

def set_ids_modnode(*args):
  """
  set_ids_modnode(id)
  """
  return _ida_nalt.set_ids_modnode(*args)

def dbg_get_input_path(*args):
  """
  dbg_get_input_path() -> ssize_t
  """
  return _ida_nalt.dbg_get_input_path(*args)

def get_abi_name(*args):
  """
  get_abi_name() -> ssize_t
  """
  return _ida_nalt.get_abi_name(*args)

def get_archive_path(*args):
  """
  get_archive_path() -> ssize_t
  """
  return _ida_nalt.get_archive_path(*args)

def set_archive_path(*args):
  """
  set_archive_path(file) -> bool
  """
  return _ida_nalt.set_archive_path(*args)

def get_encoding_qty(*args):
  """
  get_encoding_qty() -> int
  """
  return _ida_nalt.get_encoding_qty(*args)

def get_encoding_name(*args):
  """
  get_encoding_name(idx) -> char const *
  """
  return _ida_nalt.get_encoding_name(*args)

def add_encoding(*args):
  """
  add_encoding(encoding) -> int
  """
  return _ida_nalt.add_encoding(*args)

def del_encoding(*args):
  """
  del_encoding(idx) -> bool
  """
  return _ida_nalt.del_encoding(*args)

def rename_encoding(*args):
  """
  rename_encoding(idx, encoding) -> bool
  """
  return _ida_nalt.rename_encoding(*args)
BPU_1B = _ida_nalt.BPU_1B
BPU_2B = _ida_nalt.BPU_2B
BPU_4B = _ida_nalt.BPU_4B

def get_encoding_bpu(*args):
  """
  get_encoding_bpu(idx) -> int
  """
  return _ida_nalt.get_encoding_bpu(*args)

def get_strtype_bpu(*args):
  """
  get_strtype_bpu(strtype) -> int
  """
  return _ida_nalt.get_strtype_bpu(*args)

def get_default_encoding_idx(*args):
  """
  get_default_encoding_idx(bpu) -> int
  """
  return _ida_nalt.get_default_encoding_idx(*args)

def set_default_encoding_idx(*args):
  """
  set_default_encoding_idx(bpu, idx) -> bool
  """
  return _ida_nalt.set_default_encoding_idx(*args)

def encoding_from_strtype(*args):
  """
  encoding_from_strtype(strtype) -> char const *
  """
  return _ida_nalt.encoding_from_strtype(*args)

def get_import_module_qty(*args):
  """
  get_import_module_qty() -> uint
  """
  return _ida_nalt.get_import_module_qty(*args)

def delete_imports(*args):
  """
  delete_imports()
  """
  return _ida_nalt.delete_imports(*args)

def validate_idb_names(*args):
  """
  validate_idb_names() -> int
  """
  return _ida_nalt.validate_idb_names(*args)

def set_gotea(*args):
  """
  set_gotea(gotea)
  """
  return _ida_nalt.set_gotea(*args)

def get_gotea(*args):
  """
  get_gotea() -> ea_t
  """
  return _ida_nalt.get_gotea(*args)

def get_import_module_name(*args):
  """
  get_import_module_name(mod_index) -> PyObject *


  Returns the name of an imported module given its index
  @return: None or the module name
  """
  return _ida_nalt.get_import_module_name(*args)

def get_switch_info(*args):
  """
  get_switch_info(ea) -> PyObject *


  Returns the a switch_info_t structure containing the information about the switch.
  Please refer to the SDK sample 'uiswitch'
  @return: None or switch_info_t instance
  """
  return _ida_nalt.get_switch_info(*args)

def set_switch_info(*args):
  """
  set_switch_info(ea, py_swi) -> bool


  Saves the switch information in the database
  Please refer to the SDK sample 'uiswitch'
  @return: Boolean
  """
  return _ida_nalt.set_switch_info(*args)

def del_switch_info(*args):
  """
  del_switch_info(ea)


  Deletes stored switch information
  """
  return _ida_nalt.del_switch_info(*args)

def enum_import_names(*args):
  """
  enum_import_names(mod_index, py_cb) -> int


  Enumerate imports from a specific module.
  Please refer to ex_imports.py example.
  
  @param mod_index: The module index
  @param callback: A callable object that will be invoked with an ea, name (could be None) and ordinal.
  @return: 1-finished ok, -1 on error, otherwise callback return value (<=0)
  """
  return _ida_nalt.enum_import_names(*args)

def switch_info_t_create(*args):
  """
  switch_info_t_create() -> PyObject *
  """
  return _ida_nalt.switch_info_t_create(*args)

def switch_info_t_destroy(*args):
  """
  switch_info_t_destroy(py_obj) -> bool
  """
  return _ida_nalt.switch_info_t_destroy(*args)

def switch_info_t_assign(*args):
  """
  switch_info_t_assign(self, other) -> bool
  """
  return _ida_nalt.switch_info_t_assign(*args)

def switch_info_t_get_regdtype(*args):
  """
  switch_info_t_get_regdtype(self) -> PyObject *
  """
  return _ida_nalt.switch_info_t_get_regdtype(*args)

def switch_info_t_set_regdtype(*args):
  """
  switch_info_t_set_regdtype(self, value)
  """
  return _ida_nalt.switch_info_t_set_regdtype(*args)

def switch_info_t_get_flags(*args):
  """
  switch_info_t_get_flags(self) -> PyObject *
  """
  return _ida_nalt.switch_info_t_get_flags(*args)

def switch_info_t_set_flags(*args):
  """
  switch_info_t_set_flags(self, value)
  """
  return _ida_nalt.switch_info_t_set_flags(*args)

def switch_info_t_get_jcases(*args):
  """
  switch_info_t_get_jcases(self) -> PyObject *
  """
  return _ida_nalt.switch_info_t_get_jcases(*args)

def switch_info_t_set_jcases(*args):
  """
  switch_info_t_set_jcases(self, value)
  """
  return _ida_nalt.switch_info_t_set_jcases(*args)

def switch_info_t_get_regnum(*args):
  """
  switch_info_t_get_regnum(self) -> PyObject *
  """
  return _ida_nalt.switch_info_t_get_regnum(*args)

def switch_info_t_set_regnum(*args):
  """
  switch_info_t_set_regnum(self, value)
  """
  return _ida_nalt.switch_info_t_set_regnum(*args)

def switch_info_t_get_ncases(*args):
  """
  switch_info_t_get_ncases(self) -> PyObject *
  """
  return _ida_nalt.switch_info_t_get_ncases(*args)

def switch_info_t_set_ncases(*args):
  """
  switch_info_t_set_ncases(self, value)
  """
  return _ida_nalt.switch_info_t_set_ncases(*args)

def switch_info_t_get_defjump(*args):
  """
  switch_info_t_get_defjump(self) -> PyObject *
  """
  return _ida_nalt.switch_info_t_get_defjump(*args)

def switch_info_t_set_defjump(*args):
  """
  switch_info_t_set_defjump(self, value)
  """
  return _ida_nalt.switch_info_t_set_defjump(*args)

def switch_info_t_get_jumps(*args):
  """
  switch_info_t_get_jumps(self) -> PyObject *
  """
  return _ida_nalt.switch_info_t_get_jumps(*args)

def switch_info_t_set_jumps(*args):
  """
  switch_info_t_set_jumps(self, value)
  """
  return _ida_nalt.switch_info_t_set_jumps(*args)

def switch_info_t_get_elbase(*args):
  """
  switch_info_t_get_elbase(self) -> PyObject *
  """
  return _ida_nalt.switch_info_t_get_elbase(*args)

def switch_info_t_set_elbase(*args):
  """
  switch_info_t_set_elbase(self, value)
  """
  return _ida_nalt.switch_info_t_set_elbase(*args)

def switch_info_t_get_startea(*args):
  """
  switch_info_t_get_startea(self) -> PyObject *
  """
  return _ida_nalt.switch_info_t_get_startea(*args)

def switch_info_t_set_startea(*args):
  """
  switch_info_t_set_startea(self, value)
  """
  return _ida_nalt.switch_info_t_set_startea(*args)

def switch_info_t_get_custom(*args):
  """
  switch_info_t_get_custom(self) -> PyObject *
  """
  return _ida_nalt.switch_info_t_get_custom(*args)

def switch_info_t_set_custom(*args):
  """
  switch_info_t_set_custom(self, value)
  """
  return _ida_nalt.switch_info_t_set_custom(*args)

def switch_info_t_get_ind_lowcase(*args):
  """
  switch_info_t_get_ind_lowcase(self) -> PyObject *
  """
  return _ida_nalt.switch_info_t_get_ind_lowcase(*args)

def switch_info_t_set_ind_lowcase(*args):
  """
  switch_info_t_set_ind_lowcase(self, value)
  """
  return _ida_nalt.switch_info_t_set_ind_lowcase(*args)

def switch_info_t_get_values_lowcase(*args):
  """
  switch_info_t_get_values_lowcase(self) -> PyObject *
  """
  return _ida_nalt.switch_info_t_get_values_lowcase(*args)

def switch_info_t_set_values_lowcase(*args):
  """
  switch_info_t_set_values_lowcase(self, value)
  """
  return _ida_nalt.switch_info_t_set_values_lowcase(*args)
#<pycode(py_nalt)>
import _ida_idaapi

SWI_SPARSE      = 0x1
"""
sparse switch ( value table present ) otherwise lowcase present
"""

SWI_V32         = 0x2
"""
32-bit values in table
"""

SWI_J32         = 0x4
"""
32-bit jump offsets
"""

SWI_VSPLIT      = 0x8
"""
value table is split (only for 32-bit values)
"""

SWI_DEFAULT     = 0x10
"""
default case is present
"""

SWI_DEF_IN_TBL  = 0x20
"""
default case is an entry in the jump table.
This flag is only applicable in the case of a sparse
nonindirect switch (i.e. a switch with a values table).
<jump table size> == <value table size> + 1.
The default case entry is the last one in the table
(or the first one in the case of an inversed jump table).
"""

SWI_JMP_INV     = 0x40
"""
jumptable is inversed (last entry is for first entry in values table)
"""

SWI_SHIFT_MASK  = 0x180
"""
use formula (element*shift + elbase) to find jump targets
"""

SWI_ELBASE      = 0x200
"""
elbase is present (if not and shift!=0, endof(jumpea) is used)
"""

SWI_JSIZE       = 0x400
"""
jump offset expansion bit
"""

SWI_VSIZE       = 0x800
"""
value table element size expansion bit
"""

SWI_SEPARATE    = 0x1000
"""
do not create an array of individual dwords
"""

SWI_SIGNED      = 0x2000
"""
jump table entries are signed
"""

SWI_CUSTOM      = 0x4000
"""
custom jump table.
\ph{create_switch_xrefs} will be called to create code xrefs for the
table. Custom jump table must be created by the module
(see also #SWI_STDTBL)
"""

SWI_INDIRECT    = 0x00010000
"""
value table elements are used as indexes into the jump table
"""

SWI_SUBTRACT    = 0x00020000
"""
table values are subtracted from the elbase instead of being addded
"""

SWI_HXNOLOWCASE = 0x00040000
"""
lowcase value should not be used by the decompiler (internal flag)
"""

SWI_STDTBL      = 0x00080000
"""
custom jump table with standard table formatting.
ATM IDA doesn't use SWI_CUSTOM for switches with standard
table formatting. So this flag can be considered as obsolete.
"""

SWI_DEFRET      = 0x00100000
"""
return in the default case (defjump==BADADDR)
"""

# --------------------------------------------------------------------------
class switch_info_t(ida_idaapi.py_clinked_object_t):
    def __init__(self, lnk = None):
        ida_idaapi.py_clinked_object_t.__init__(self, lnk)
        self.bc695_api = False

    def _create_clink(self):
        return _ida_nalt.switch_info_t_create()

    def _del_clink(self, lnk):
        return _ida_nalt.switch_info_t_destroy(lnk)

    def assign(self, other):
        return _ida_nalt.switch_info_t_assign(self, other)

    def is_indirect(self):
        return (self.flags & SWI_INDIRECT) != 0

    def is_subtract(self):
        return (self.flags & SWI_SUBTRACT) != 0

    def get_jtable_size(self):
        return self.jcases if self.is_indirect() else self.ncases

    def get_lowcase(self):
        return self.ind_lowcase if self.is_indirect() else self.lowcase

    def set_expr(self, r, dt):
        self.regnum = r
        self.regdtype = dt

    def get_shift(self):
        return (self.flags & SWI_SHIFT_MASK) >> 7

    def set_shift(self, shift):
        self.flags &= ~SWI_SHIFT_MASK
        self.flags |= ((shift & 3) << 7)

    def get_jtable_element_size(self):
        code = self.flags & (SWI_J32|SWI_JSIZE)
        if   code == 0:         return 2
        elif code == SWI_J32:   return 4
        elif code == SWI_JSIZE: return 1
        else:                   return 8

    def set_jtable_element_size(self, size):
        self.flags &= ~(SWI_J32|SWI_JSIZE)
        if size == 4:   self.flags |= SWI_J32
        elif size == 1: self.flags |= SWI_JSIZE
        elif size == 8: self.flags |= SWI_J32|SWI_JSIZE
        elif size != 2: return False
        return True

    def get_vtable_element_size(self):
        code = self.flags & (SWI_V32|SWI_VSIZE)
        if   code == 0:         return 2
        elif code == SWI_V32:   return 4
        elif code == SWI_VSIZE: return 1
        return 8

    def set_vtable_element_size(self, size):
        self.flags &= ~SWI_V32|SWI_VSIZE
        if size == 4:   self.flags |= SWI_V32
        elif size == 1: self.flags |= SWI_VSIZE
        elif size == 8: self.flags |= SWI_V32|SWI_VSIZE
        elif size != 2: return False
        return True

    #
    # Autogenerated
    #
    def __get_regdtype__(self):
        return _ida_nalt.switch_info_t_get_regdtype(self)
    def __set_regdtype__(self, v):
        _ida_nalt.switch_info_t_set_regdtype(self, v)
    def __get_jcases__(self):
        return _ida_nalt.switch_info_t_get_jcases(self)
    def __set_jcases__(self, v):
        _ida_nalt.switch_info_t_set_jcases(self, v)
    def __get_regnum__(self):
        return _ida_nalt.switch_info_t_get_regnum(self)
    def __set_regnum__(self, v):
        _ida_nalt.switch_info_t_set_regnum(self, v)
    def __get_flags__(self):
        return _ida_nalt.switch_info_t_get_flags(self)
    def __set_flags__(self, v):
        _ida_nalt.switch_info_t_set_flags(self, v)
    def __get_ncases__(self):
        return _ida_nalt.switch_info_t_get_ncases(self)
    def __set_ncases__(self, v):
        _ida_nalt.switch_info_t_set_ncases(self, v)
    def __get_defjump__(self):
        return _ida_nalt.switch_info_t_get_defjump(self)
    def __set_defjump__(self, v):
        _ida_nalt.switch_info_t_set_defjump(self, v)
    def __get_jumps__(self):
        return _ida_nalt.switch_info_t_get_jumps(self)
    def __set_jumps__(self, v):
        _ida_nalt.switch_info_t_set_jumps(self, v)
    def __get_elbase__(self):
        return _ida_nalt.switch_info_t_get_elbase(self)
    def __set_elbase__(self, v):
        _ida_nalt.switch_info_t_set_elbase(self, v)
    def __get_startea__(self):
        return _ida_nalt.switch_info_t_get_startea(self)
    def __set_startea__(self, v):
        _ida_nalt.switch_info_t_set_startea(self, v)
    def __get_custom__(self):
        return _ida_nalt.switch_info_t_get_custom(self)
    def __set_custom__(self, v):
        _ida_nalt.switch_info_t_set_custom(self, v)
    def __get_ind_lowcase__(self):
        return _ida_nalt.switch_info_t_get_ind_lowcase(self)
    def __set_ind_lowcase__(self, v):
        _ida_nalt.switch_info_t_set_ind_lowcase(self, v)
    def __get_values_lowcase__(self):
        return _ida_nalt.switch_info_t_get_values_lowcase(self)
    def __set_values_lowcase__(self, v):
        _ida_nalt.switch_info_t_set_values_lowcase(self, v)
    regdtype = property(__get_regdtype__, __set_regdtype__)
    """
    size of the switch expression register as dtype
    """
    jcases = property(__get_jcases__, __set_jcases__)
    """
    number of entries in the jump table (SWI_INDIRECT)
    """
    regnum = property(__get_regnum__, __set_regnum__)
    """
    the switch expression as a register number
    """
    flags = property(__get_flags__, __set_flags__)
    """
    switch info flags
    """
    ncases = property(__get_ncases__, __set_ncases__)
    """
    number of cases (excluding default)
    """
    defjump = property(__get_defjump__, __set_defjump__)
    """
    default jump address
    """
    jumps = property(__get_jumps__, __set_jumps__)
    """
    jump table address
    """
    elbase = property(__get_elbase__, __set_elbase__)
    """
    element base
    """
    startea = property(__get_startea__, __set_startea__)
    """
    start of switch idiom
    """
    custom = property(__get_custom__, __set_custom__)
    """
    information for custom tables (filled and used by modules)
    """
    ind_lowcase = property(__get_ind_lowcase__, __set_ind_lowcase__)
    values = property(__get_values_lowcase__, __set_values_lowcase__)
    lowcase = property(__get_values_lowcase__, __set_values_lowcase__)

#</pycode(py_nalt)>

if _BC695:
    ASCSTR_LAST=7
    ASCSTR_LEN2=STRTYPE_LEN2
    ASCSTR_LEN4=STRTYPE_LEN4
    ASCSTR_PASCAL=STRTYPE_PASCAL
    ASCSTR_TERMCHR=STRTYPE_TERMCHR
    ASCSTR_ULEN2=STRTYPE_LEN2_16
    ASCSTR_ULEN4=STRTYPE_LEN4_16
    ASCSTR_UNICODE=STRTYPE_C_16
    ASCSTR_UTF16=STRTYPE_C_16
    ASCSTR_UTF32=STRTYPE_C_32
    REF_VHIGH=V695_REF_VHIGH
    REF_VLOW=V695_REF_VLOW
    SWI_END_IN_TBL=SWI_DEF_IN_TBL
    SWI_EXTENDED=0x8000
    SWI2_INDIRECT=SWI_INDIRECT >> 16
    SWI2_SUBTRACT=SWI_SUBTRACT >> 16
    import ida_netnode
    RIDX_AUTO_PLUGINS=ida_netnode.BADNODE
    change_encoding_name=rename_encoding
    @bc695redef
    def del_tinfo2(ea, n=None):
        if n is not None:
            return del_op_tinfo(ea, n)
        else:
            return del_tinfo(ea)
    get_encodings_count=get_encoding_qty
    def get_op_tinfo(*args):
        import ida_typeinf
        if isinstance(args[2], ida_typeinf.tinfo_t): # 6.95: ea, n, tinfo_t
            ea, n, tif = args
        else:                                        # 7.00: tinfo_t, ea, n
            tif, ea, n = args
        return _ida_nalt.get_op_tinfo(tif, ea, n)
    get_op_tinfo2=get_op_tinfo
    @bc695redef
    def is_unicode(strtype):
        return (strtype & STRWIDTH_MASK) > 0
    set_op_tinfo2=set_op_tinfo
    set_tinfo2=set_tinfo
    switch_info_t.regdtyp = switch_info_t.regdtype
    def get_tinfo(*args):
        import ida_typeinf
        if isinstance(args[1], ida_typeinf.tinfo_t): # 6.95: ea, tinfo_t
            ea, tif = args
        else:                                        # 7.00: tinfo_t, ea
            tif, ea = args
        return _ida_nalt.get_tinfo(tif, ea)
    get_tinfo2=get_tinfo
    def get_refinfo(*args):
        if isinstance(args[2], refinfo_t): # 6.95: ea, n, refinfo_t
            ea, n, ri = args
        else:                              # 7.00: refinfo_t, ea, n
            ri, ea, n = args
        return _ida_nalt.get_refinfo(ri, ea, n)
    get_switch_info_ex=get_switch_info
    set_switch_info_ex=set_switch_info
    del_switch_info_ex=del_switch_info
    switch_info_ex_t_assign=switch_info_t_assign
    switch_info_ex_t_create=switch_info_t_create
    switch_info_ex_t_destroy=switch_info_t_destroy
    switch_info_ex_t_get_custom=switch_info_t_get_custom
    switch_info_ex_t_get_defjump=switch_info_t_get_defjump
    switch_info_ex_t_get_elbase=switch_info_t_get_elbase
    switch_info_ex_t_get_flags=switch_info_t_get_flags
    switch_info_ex_t_get_ind_lowcase=switch_info_t_get_ind_lowcase
    switch_info_ex_t_get_jcases=switch_info_t_get_jcases
    switch_info_ex_t_get_jumps=switch_info_t_get_jumps
    switch_info_ex_t_get_ncases=switch_info_t_get_ncases
    switch_info_ex_t_get_regdtyp=switch_info_t_get_regdtype
    switch_info_ex_t_get_regnum=switch_info_t_get_regnum
    switch_info_ex_t_get_startea=switch_info_t_get_startea
    switch_info_ex_t_get_values_lowcase=switch_info_t_get_values_lowcase
    switch_info_ex_t_set_custom=switch_info_t_set_custom
    switch_info_ex_t_set_defjump=switch_info_t_set_defjump
    switch_info_ex_t_set_elbase=switch_info_t_set_elbase
    switch_info_ex_t_set_flags=switch_info_t_set_flags
    switch_info_ex_t_set_ind_lowcase=switch_info_t_set_ind_lowcase
    switch_info_ex_t_set_jcases=switch_info_t_set_jcases
    switch_info_ex_t_set_jumps=switch_info_t_set_jumps
    switch_info_ex_t_set_ncases=switch_info_t_set_ncases
    switch_info_ex_t_set_regdtyp=switch_info_t_set_regdtype
    switch_info_ex_t_set_regnum=switch_info_t_set_regnum
    switch_info_ex_t_set_startea=switch_info_t_set_startea
    switch_info_ex_t_set_values_lowcase=switch_info_t_set_values_lowcase
    def __switch_info_t_get_flags__(instance):
        return switch_info_t.__get_flags__(instance) | SWI_EXTENDED
    def __switch_info_t_set_flags__(instance, v):
        if instance.bc695_api:
            v |= (switch_info_t.__get_flags__(instance) & 0xFFFF0000)
        switch_info_t.__set_flags__(instance, v)
    switch_info_t.flags = property(__switch_info_t_get_flags__, __switch_info_t_set_flags__)
    def __switch_info_t_get_flags2__(instance):
        instance.bc695_api = True
        return switch_info_t.__get_flags__(instance) >> 16
    def __switch_info_t_set_flags2__(instance, v):
        instance.bc695_api = True
        flags = switch_info_t.__get_flags__(instance)
        instance.flags = (flags & 0xFFFF) | (v << 16)
    switch_info_t.flags2 = property(__switch_info_t_get_flags2__, __switch_info_t_set_flags2__)
    switch_info_ex_t=switch_info_t




