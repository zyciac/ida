# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""
IDA Plugin SDK API wrapper: enum
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ida_enum', [dirname(__file__)])
        except ImportError:
            import _ida_enum
            return _ida_enum
        if fp is not None:
            try:
                _mod = imp.load_module('_ida_enum', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ida_enum = swig_import_helper()
    del swig_import_helper
else:
    import _ida_enum
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


import ida_idaapi

import sys
_BC695 = sys.modules["__main__"].IDAPYTHON_COMPAT_695_API

if _BC695:






    def bc695redef(func):
        func.func_dict["bc695redef"] = True
        return func

DEFMASK = _ida_enum.DEFMASK

def get_enum_qty(*args):
  """
  get_enum_qty() -> size_t
  """
  return _ida_enum.get_enum_qty(*args)

def getn_enum(*args):
  """
  getn_enum(n) -> enum_t
  """
  return _ida_enum.getn_enum(*args)

def get_enum_idx(*args):
  """
  get_enum_idx(id) -> uval_t
  """
  return _ida_enum.get_enum_idx(*args)

def get_enum(*args):
  """
  get_enum(name) -> enum_t
  """
  return _ida_enum.get_enum(*args)

def is_bf(*args):
  """
  is_bf(id) -> bool
  """
  return _ida_enum.is_bf(*args)

def is_enum_hidden(*args):
  """
  is_enum_hidden(id) -> bool
  """
  return _ida_enum.is_enum_hidden(*args)

def set_enum_hidden(*args):
  """
  set_enum_hidden(id, hidden) -> bool
  """
  return _ida_enum.set_enum_hidden(*args)

def is_enum_fromtil(*args):
  """
  is_enum_fromtil(id) -> bool
  """
  return _ida_enum.is_enum_fromtil(*args)

def set_enum_fromtil(*args):
  """
  set_enum_fromtil(id, fromtil) -> bool
  """
  return _ida_enum.set_enum_fromtil(*args)

def is_ghost_enum(*args):
  """
  is_ghost_enum(id) -> bool
  """
  return _ida_enum.is_ghost_enum(*args)

def set_enum_ghost(*args):
  """
  set_enum_ghost(id, ghost) -> bool
  """
  return _ida_enum.set_enum_ghost(*args)

def get_enum_name(*args):
  """
  get_enum_name(id) -> ssize_t
  """
  return _ida_enum.get_enum_name(*args)

def get_enum_width(*args):
  """
  get_enum_width(id) -> size_t
  """
  return _ida_enum.get_enum_width(*args)

def set_enum_width(*args):
  """
  set_enum_width(id, width) -> bool
  """
  return _ida_enum.set_enum_width(*args)

def get_enum_cmt(*args):
  """
  get_enum_cmt(id, repeatable) -> ssize_t
  """
  return _ida_enum.get_enum_cmt(*args)

def get_enum_size(*args):
  """
  get_enum_size(id) -> size_t
  """
  return _ida_enum.get_enum_size(*args)

def get_enum_flag(*args):
  """
  get_enum_flag(id) -> flags_t
  """
  return _ida_enum.get_enum_flag(*args)

def get_enum_member_by_name(*args):
  """
  get_enum_member_by_name(name) -> const_t
  """
  return _ida_enum.get_enum_member_by_name(*args)

def get_enum_member_value(*args):
  """
  get_enum_member_value(id) -> uval_t
  """
  return _ida_enum.get_enum_member_value(*args)

def get_enum_member_enum(*args):
  """
  get_enum_member_enum(id) -> enum_t
  """
  return _ida_enum.get_enum_member_enum(*args)

def get_enum_member_bmask(*args):
  """
  get_enum_member_bmask(id) -> bmask_t
  """
  return _ida_enum.get_enum_member_bmask(*args)

def get_enum_member(*args):
  """
  get_enum_member(id, value, serial, mask) -> const_t
  """
  return _ida_enum.get_enum_member(*args)

def get_first_bmask(*args):
  """
  get_first_bmask(id) -> bmask_t
  """
  return _ida_enum.get_first_bmask(*args)

def get_last_bmask(*args):
  """
  get_last_bmask(id) -> bmask_t
  """
  return _ida_enum.get_last_bmask(*args)

def get_next_bmask(*args):
  """
  get_next_bmask(id, bmask) -> bmask_t
  """
  return _ida_enum.get_next_bmask(*args)

def get_prev_bmask(*args):
  """
  get_prev_bmask(id, bmask) -> bmask_t
  """
  return _ida_enum.get_prev_bmask(*args)

def get_first_enum_member(*args):
  """
  get_first_enum_member(id, bmask=(bmask_t(-1))) -> uval_t
  """
  return _ida_enum.get_first_enum_member(*args)

def get_last_enum_member(*args):
  """
  get_last_enum_member(id, bmask=(bmask_t(-1))) -> uval_t
  """
  return _ida_enum.get_last_enum_member(*args)

def get_next_enum_member(*args):
  """
  get_next_enum_member(id, value, bmask=(bmask_t(-1))) -> uval_t
  """
  return _ida_enum.get_next_enum_member(*args)

def get_prev_enum_member(*args):
  """
  get_prev_enum_member(id, value, bmask=(bmask_t(-1))) -> uval_t
  """
  return _ida_enum.get_prev_enum_member(*args)

def get_enum_member_name(*args):
  """
  get_enum_member_name(id) -> ssize_t
  """
  return _ida_enum.get_enum_member_name(*args)

def get_enum_member_cmt(*args):
  """
  get_enum_member_cmt(id, repeatable) -> ssize_t
  """
  return _ida_enum.get_enum_member_cmt(*args)

def get_first_serial_enum_member(*args):
  """
  get_first_serial_enum_member(id, value, bmask) -> const_t
  """
  return _ida_enum.get_first_serial_enum_member(*args)

def get_last_serial_enum_member(*args):
  """
  get_last_serial_enum_member(id, value, bmask) -> const_t
  """
  return _ida_enum.get_last_serial_enum_member(*args)

def get_next_serial_enum_member(*args):
  """
  get_next_serial_enum_member(in_out_serial, first_cid) -> const_t
  """
  return _ida_enum.get_next_serial_enum_member(*args)

def get_prev_serial_enum_member(*args):
  """
  get_prev_serial_enum_member(in_out_serial, first_cid) -> const_t
  """
  return _ida_enum.get_prev_serial_enum_member(*args)
class enum_member_visitor_t(object):
    """
    Proxy of C++ enum_member_visitor_t class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def visit_enum_member(self, *args):
        """
        visit_enum_member(self, cid, value) -> int
        """
        return _ida_enum.enum_member_visitor_t_visit_enum_member(self, *args)

    def __init__(self, *args):
        """
        __init__(self) -> enum_member_visitor_t
        """
        if self.__class__ == enum_member_visitor_t:
            _self = None
        else:
            _self = self
        this = _ida_enum.new_enum_member_visitor_t(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_enum.delete_enum_member_visitor_t
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _ida_enum.disown_enum_member_visitor_t(self)
        return weakref_proxy(self)
enum_member_visitor_t_swigregister = _ida_enum.enum_member_visitor_t_swigregister
enum_member_visitor_t_swigregister(enum_member_visitor_t)
cvar = _ida_enum.cvar
MAX_ENUM_SERIAL = cvar.MAX_ENUM_SERIAL


def for_all_enum_members(*args):
  """
  for_all_enum_members(id, cv) -> int
  """
  return _ida_enum.for_all_enum_members(*args)

def get_enum_member_serial(*args):
  """
  get_enum_member_serial(cid) -> uchar
  """
  return _ida_enum.get_enum_member_serial(*args)

def get_enum_type_ordinal(*args):
  """
  get_enum_type_ordinal(id) -> int32
  """
  return _ida_enum.get_enum_type_ordinal(*args)

def set_enum_type_ordinal(*args):
  """
  set_enum_type_ordinal(id, ord)
  """
  return _ida_enum.set_enum_type_ordinal(*args)

def add_enum(*args):
  """
  add_enum(idx, name, flag) -> enum_t
  """
  return _ida_enum.add_enum(*args)

def del_enum(*args):
  """
  del_enum(id)
  """
  return _ida_enum.del_enum(*args)

def set_enum_idx(*args):
  """
  set_enum_idx(id, idx) -> bool
  """
  return _ida_enum.set_enum_idx(*args)

def set_enum_bf(*args):
  """
  set_enum_bf(id, bf) -> bool
  """
  return _ida_enum.set_enum_bf(*args)

def set_enum_name(*args):
  """
  set_enum_name(id, name) -> bool
  """
  return _ida_enum.set_enum_name(*args)

def set_enum_cmt(*args):
  """
  set_enum_cmt(id, cmt, repeatable) -> bool
  """
  return _ida_enum.set_enum_cmt(*args)

def set_enum_flag(*args):
  """
  set_enum_flag(id, flag) -> bool
  """
  return _ida_enum.set_enum_flag(*args)

def add_enum_member(*args):
  """
  add_enum_member(id, name, value, bmask=(bmask_t(-1))) -> int
  """
  return _ida_enum.add_enum_member(*args)
ENUM_MEMBER_ERROR_NAME = _ida_enum.ENUM_MEMBER_ERROR_NAME
ENUM_MEMBER_ERROR_VALUE = _ida_enum.ENUM_MEMBER_ERROR_VALUE
ENUM_MEMBER_ERROR_ENUM = _ida_enum.ENUM_MEMBER_ERROR_ENUM
ENUM_MEMBER_ERROR_MASK = _ida_enum.ENUM_MEMBER_ERROR_MASK
ENUM_MEMBER_ERROR_ILLV = _ida_enum.ENUM_MEMBER_ERROR_ILLV

def del_enum_member(*args):
  """
  del_enum_member(id, value, serial, bmask) -> bool
  """
  return _ida_enum.del_enum_member(*args)

def set_enum_member_name(*args):
  """
  set_enum_member_name(id, name) -> bool
  """
  return _ida_enum.set_enum_member_name(*args)

def set_enum_member_cmt(*args):
  """
  set_enum_member_cmt(id, cmt, repeatable) -> bool
  """
  return _ida_enum.set_enum_member_cmt(*args)

def is_one_bit_mask(*args):
  """
  is_one_bit_mask(mask) -> bool
  """
  return _ida_enum.is_one_bit_mask(*args)

def set_bmask_name(*args):
  """
  set_bmask_name(id, bmask, name) -> bool
  """
  return _ida_enum.set_bmask_name(*args)

def get_bmask_name(*args):
  """
  get_bmask_name(id, bmask) -> ssize_t
  """
  return _ida_enum.get_bmask_name(*args)

def set_bmask_cmt(*args):
  """
  set_bmask_cmt(id, bmask, cmt, repeatable) -> bool
  """
  return _ida_enum.set_bmask_cmt(*args)

def get_bmask_cmt(*args):
  """
  get_bmask_cmt(id, bmask, repeatable) -> ssize_t
  """
  return _ida_enum.get_bmask_cmt(*args)
if _BC695:
    CONST_ERROR_ENUM=ENUM_MEMBER_ERROR_NAME
    CONST_ERROR_ILLV=ENUM_MEMBER_ERROR_VALUE
    CONST_ERROR_MASK=ENUM_MEMBER_ERROR_ENUM
    CONST_ERROR_NAME=ENUM_MEMBER_ERROR_MASK
    CONST_ERROR_VALUE=ENUM_MEMBER_ERROR_ILLV
    add_const=add_enum_member
    del_const=del_enum_member
    get_const=get_enum_member
    get_const_bmask=get_enum_member_bmask
    get_const_by_name=get_enum_member_by_name
    get_const_cmt=get_enum_member_cmt
    get_const_enum=get_enum_member_enum
    get_const_name=get_enum_member_name
    get_const_serial=get_enum_member_serial
    get_const_value=get_enum_member_value
    get_first_const=get_first_enum_member
    get_first_serial_const=get_first_serial_enum_member
    get_last_const=get_last_enum_member
    get_last_serial_const=get_last_serial_enum_member
    get_next_const=get_next_enum_member
    get_next_serial_const=get_next_serial_enum_member
    get_prev_const=get_prev_enum_member
    get_prev_serial_const=get_prev_serial_enum_member
    set_const_cmt=set_enum_member_cmt
    set_const_name=set_enum_member_name
    def get_next_serial_enum_member(*args):
        serial, cid = args[0], args[1]
        if serial > 0xFF:
            serial, cid = cid, serial
        return _ida_enum.get_next_serial_enum_member(serial, cid)
    def get_prev_serial_enum_member(*args):
        serial, cid = args[0], args[1]
        if serial > 0xFF:
            serial, cid = cid, serial
        return _ida_enum.get_prev_serial_enum_member(serial, cid)




