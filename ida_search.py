# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""
IDA Plugin SDK API wrapper: search
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ida_search', [dirname(__file__)])
        except ImportError:
            import _ida_search
            return _ida_search
        if fp is not None:
            try:
                _mod = imp.load_module('_ida_search', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ida_search = swig_import_helper()
    del swig_import_helper
else:
    import _ida_search
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


import ida_idaapi

import sys
_BC695 = sys.modules["__main__"].IDAPYTHON_COMPAT_695_API

if _BC695:






    def bc695redef(func):
        func.func_dict["bc695redef"] = True
        return func

SEARCH_UP = _ida_search.SEARCH_UP
SEARCH_DOWN = _ida_search.SEARCH_DOWN
SEARCH_NEXT = _ida_search.SEARCH_NEXT
SEARCH_CASE = _ida_search.SEARCH_CASE
SEARCH_REGEX = _ida_search.SEARCH_REGEX
SEARCH_NOBRK = _ida_search.SEARCH_NOBRK
SEARCH_NOSHOW = _ida_search.SEARCH_NOSHOW
SEARCH_UNICODE = _ida_search.SEARCH_UNICODE
SEARCH_IDENT = _ida_search.SEARCH_IDENT
SEARCH_BRK = _ida_search.SEARCH_BRK

def search_down(*args):
  """
  search_down(sflag) -> bool
  """
  return _ida_search.search_down(*args)

def find_error(*args):
  """
  find_error(ea, sflag) -> ea_t
  """
  return _ida_search.find_error(*args)

def find_notype(*args):
  """
  find_notype(ea, sflag) -> ea_t
  """
  return _ida_search.find_notype(*args)

def find_unknown(*args):
  """
  find_unknown(ea, sflag) -> ea_t
  """
  return _ida_search.find_unknown(*args)

def find_defined(*args):
  """
  find_defined(ea, sflag) -> ea_t
  """
  return _ida_search.find_defined(*args)

def find_suspop(*args):
  """
  find_suspop(ea, sflag) -> ea_t
  """
  return _ida_search.find_suspop(*args)

def find_data(*args):
  """
  find_data(ea, sflag) -> ea_t
  """
  return _ida_search.find_data(*args)

def find_code(*args):
  """
  find_code(ea, sflag) -> ea_t
  """
  return _ida_search.find_code(*args)

def find_not_func(*args):
  """
  find_not_func(ea, sflag) -> ea_t
  """
  return _ida_search.find_not_func(*args)

def find_imm(*args):
  """
  find_imm(newEA, sflag, srchValue) -> ea_t
  """
  return _ida_search.find_imm(*args)

def find_binary(*args):
  """
  find_binary(startea, endea, ubinstr, radix, sflag) -> ea_t
  """
  return _ida_search.find_binary(*args)

def find_text(*args):
  """
  find_text(start_ea, y, x, ustr, sflag) -> ea_t
  """
  return _ida_search.find_text(*args)
if _BC695:
    find_void=find_suspop




