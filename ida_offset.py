# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""
IDA Plugin SDK API wrapper: offset
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ida_offset', [dirname(__file__)])
        except ImportError:
            import _ida_offset
            return _ida_offset
        if fp is not None:
            try:
                _mod = imp.load_module('_ida_offset', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ida_offset = swig_import_helper()
    del swig_import_helper
else:
    import _ida_offset
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


import ida_idaapi

import sys
_BC695 = sys.modules["__main__"].IDAPYTHON_COMPAT_695_API

if _BC695:






    def bc695redef(func):
        func.func_dict["bc695redef"] = True
        return func


def get_default_reftype(*args):
  """
  get_default_reftype(ea) -> reftype_t
  """
  return _ida_offset.get_default_reftype(*args)

def op_offset_ex(*args):
  """
  op_offset_ex(ea, n, ri) -> int
  """
  return _ida_offset.op_offset_ex(*args)

def op_offset(*args):
  """
  op_offset(ea, n, type, target=BADADDR, base=0, tdelta=0) -> int
  """
  return _ida_offset.op_offset(*args)

def op_plain_offset(*args):
  """
  op_plain_offset(ea, n, base) -> bool
  """
  return _ida_offset.op_plain_offset(*args)

def get_offbase(*args):
  """
  get_offbase(ea, n) -> ea_t
  """
  return _ida_offset.get_offbase(*args)

def get_offset_expression(*args):
  """
  get_offset_expression(ea, n, _from, offset, getn_flags=0) -> int
  """
  return _ida_offset.get_offset_expression(*args)

def get_offset_expr(*args):
  """
  get_offset_expr(ea, n, ri, _from, offset, getn_flags=0) -> int
  """
  return _ida_offset.get_offset_expr(*args)

def can_be_off32(*args):
  """
  can_be_off32(ea) -> ea_t
  """
  return _ida_offset.can_be_off32(*args)

def calc_offset_base(*args):
  """
  calc_offset_base(ea, n) -> ea_t
  """
  return _ida_offset.calc_offset_base(*args)

def calc_probable_base_by_value(*args):
  """
  calc_probable_base_by_value(ea, off) -> ea_t
  """
  return _ida_offset.calc_probable_base_by_value(*args)

def calc_reference_data(*args):
  """
  calc_reference_data(target, base, _from, ri, opval) -> bool
  """
  return _ida_offset.calc_reference_data(*args)

def add_refinfo_dref(*args):
  """
  add_refinfo_dref(insn, _from, ri, opval, type, opoff) -> ea_t
  """
  return _ida_offset.add_refinfo_dref(*args)

def calc_target(*args):
  """
  calc_target(_from, ea, n, opval) -> ea_t
  """
  return _ida_offset.calc_target(*args)

def calc_basevalue(*args):
  """
  calc_basevalue(target, base) -> ea_t
  """
  return _ida_offset.calc_basevalue(*args)
if _BC695:
    calc_reference_basevalue=calc_basevalue
    calc_reference_target=calc_target
    @bc695redef
    def set_offset(ea, n, base):
        import ida_idaapi
        otype = get_default_reftype(ea)
        return op_offset(ea, n, otype, ida_idaapi.BADADDR, base) > 0




