# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""
IDA Plugin SDK API wrapper: dbg
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ida_dbg', [dirname(__file__)])
        except ImportError:
            import _ida_dbg
            return _ida_dbg
        if fp is not None:
            try:
                _mod = imp.load_module('_ida_dbg', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ida_dbg = swig_import_helper()
    del swig_import_helper
else:
    import _ida_dbg
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


import ida_idaapi

import sys
_BC695 = sys.modules["__main__"].IDAPYTHON_COMPAT_695_API

if _BC695:






    def bc695redef(func):
        func.func_dict["bc695redef"] = True
        return func

import ida_idd
class bpt_vec_t(object):
    """
    Proxy of C++ qvector<(bpt_t)> class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args):
        """
        __init__(self) -> bpt_vec_t
        __init__(self, x) -> bpt_vec_t
        """
        this = _ida_dbg.new_bpt_vec_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_dbg.delete_bpt_vec_t
    __del__ = lambda self : None;
    def push_back(self, *args):
        """
        push_back(self, x)
        push_back(self) -> bpt_t
        """
        return _ida_dbg.bpt_vec_t_push_back(self, *args)

    def pop_back(self, *args):
        """
        pop_back(self)
        """
        return _ida_dbg.bpt_vec_t_pop_back(self, *args)

    def size(self, *args):
        """
        size(self) -> size_t
        """
        return _ida_dbg.bpt_vec_t_size(self, *args)

    def empty(self, *args):
        """
        empty(self) -> bool
        """
        return _ida_dbg.bpt_vec_t_empty(self, *args)

    def at(self, *args):
        """
        at(self, _idx) -> bpt_t
        """
        return _ida_dbg.bpt_vec_t_at(self, *args)

    def qclear(self, *args):
        """
        qclear(self)
        """
        return _ida_dbg.bpt_vec_t_qclear(self, *args)

    def clear(self, *args):
        """
        clear(self)
        """
        return _ida_dbg.bpt_vec_t_clear(self, *args)

    def resize(self, *args):
        """
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_dbg.bpt_vec_t_resize(self, *args)

    def grow(self, *args):
        """
        grow(self, x=bpt_t())
        """
        return _ida_dbg.bpt_vec_t_grow(self, *args)

    def capacity(self, *args):
        """
        capacity(self) -> size_t
        """
        return _ida_dbg.bpt_vec_t_capacity(self, *args)

    def reserve(self, *args):
        """
        reserve(self, cnt)
        """
        return _ida_dbg.bpt_vec_t_reserve(self, *args)

    def truncate(self, *args):
        """
        truncate(self)
        """
        return _ida_dbg.bpt_vec_t_truncate(self, *args)

    def swap(self, *args):
        """
        swap(self, r)
        """
        return _ida_dbg.bpt_vec_t_swap(self, *args)

    def extract(self, *args):
        """
        extract(self) -> bpt_t
        """
        return _ida_dbg.bpt_vec_t_extract(self, *args)

    def inject(self, *args):
        """
        inject(self, s, len)
        """
        return _ida_dbg.bpt_vec_t_inject(self, *args)

    def begin(self, *args):
        """
        begin(self) -> bpt_t
        begin(self) -> bpt_t
        """
        return _ida_dbg.bpt_vec_t_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> bpt_t
        end(self) -> bpt_t
        """
        return _ida_dbg.bpt_vec_t_end(self, *args)

    def insert(self, *args):
        """
        insert(self, it, x) -> bpt_t
        """
        return _ida_dbg.bpt_vec_t_insert(self, *args)

    def erase(self, *args):
        """
        erase(self, it) -> bpt_t
        erase(self, first, last) -> bpt_t
        """
        return _ida_dbg.bpt_vec_t_erase(self, *args)

    def __len__(self, *args):
        """
        __len__(self) -> size_t
        """
        return _ida_dbg.bpt_vec_t___len__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, i) -> bpt_t
        """
        return _ida_dbg.bpt_vec_t___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, i, v)
        """
        return _ida_dbg.bpt_vec_t___setitem__(self, *args)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

bpt_vec_t_swigregister = _ida_dbg.bpt_vec_t_swigregister
bpt_vec_t_swigregister(bpt_vec_t)

class memreg_infos_t(object):
    """
    Proxy of C++ qvector<(memreg_info_t)> class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args):
        """
        __init__(self) -> memreg_infos_t
        __init__(self, x) -> memreg_infos_t
        """
        this = _ida_dbg.new_memreg_infos_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_dbg.delete_memreg_infos_t
    __del__ = lambda self : None;
    def push_back(self, *args):
        """
        push_back(self, x)
        push_back(self) -> memreg_info_t
        """
        return _ida_dbg.memreg_infos_t_push_back(self, *args)

    def pop_back(self, *args):
        """
        pop_back(self)
        """
        return _ida_dbg.memreg_infos_t_pop_back(self, *args)

    def size(self, *args):
        """
        size(self) -> size_t
        """
        return _ida_dbg.memreg_infos_t_size(self, *args)

    def empty(self, *args):
        """
        empty(self) -> bool
        """
        return _ida_dbg.memreg_infos_t_empty(self, *args)

    def at(self, *args):
        """
        at(self, _idx) -> memreg_info_t
        """
        return _ida_dbg.memreg_infos_t_at(self, *args)

    def qclear(self, *args):
        """
        qclear(self)
        """
        return _ida_dbg.memreg_infos_t_qclear(self, *args)

    def clear(self, *args):
        """
        clear(self)
        """
        return _ida_dbg.memreg_infos_t_clear(self, *args)

    def resize(self, *args):
        """
        resize(self, _newsize, x)
        resize(self, _newsize)
        """
        return _ida_dbg.memreg_infos_t_resize(self, *args)

    def grow(self, *args):
        """
        grow(self, x=memreg_info_t())
        """
        return _ida_dbg.memreg_infos_t_grow(self, *args)

    def capacity(self, *args):
        """
        capacity(self) -> size_t
        """
        return _ida_dbg.memreg_infos_t_capacity(self, *args)

    def reserve(self, *args):
        """
        reserve(self, cnt)
        """
        return _ida_dbg.memreg_infos_t_reserve(self, *args)

    def truncate(self, *args):
        """
        truncate(self)
        """
        return _ida_dbg.memreg_infos_t_truncate(self, *args)

    def swap(self, *args):
        """
        swap(self, r)
        """
        return _ida_dbg.memreg_infos_t_swap(self, *args)

    def extract(self, *args):
        """
        extract(self) -> memreg_info_t
        """
        return _ida_dbg.memreg_infos_t_extract(self, *args)

    def inject(self, *args):
        """
        inject(self, s, len)
        """
        return _ida_dbg.memreg_infos_t_inject(self, *args)

    def begin(self, *args):
        """
        begin(self) -> memreg_info_t
        begin(self) -> memreg_info_t
        """
        return _ida_dbg.memreg_infos_t_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> memreg_info_t
        end(self) -> memreg_info_t
        """
        return _ida_dbg.memreg_infos_t_end(self, *args)

    def insert(self, *args):
        """
        insert(self, it, x) -> memreg_info_t
        """
        return _ida_dbg.memreg_infos_t_insert(self, *args)

    def erase(self, *args):
        """
        erase(self, it) -> memreg_info_t
        erase(self, first, last) -> memreg_info_t
        """
        return _ida_dbg.memreg_infos_t_erase(self, *args)

    def __len__(self, *args):
        """
        __len__(self) -> size_t
        """
        return _ida_dbg.memreg_infos_t___len__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, i) -> memreg_info_t
        """
        return _ida_dbg.memreg_infos_t___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, i, v)
        """
        return _ida_dbg.memreg_infos_t___setitem__(self, *args)

    front = ida_idaapi._qvector_front
    back = ida_idaapi._qvector_back
    __iter__ = ida_idaapi._bounded_getitem_iterator

memreg_infos_t_swigregister = _ida_dbg.memreg_infos_t_swigregister
memreg_infos_t_swigregister(memreg_infos_t)


def load_debugger(*args):
  """
  load_debugger(nonnul_dbgname, use_remote) -> bool
  """
  return _ida_dbg.load_debugger(*args)

def set_debugger_event_cond(*args):
  """
  set_debugger_event_cond(nonnul_cond)
  """
  return _ida_dbg.set_debugger_event_cond(*args)

def diff_trace_file(*args):
  """
  diff_trace_file(nonnul_filename) -> bool
  """
  return _ida_dbg.diff_trace_file(*args)

def set_bptloc_string(*args):
  """
  set_bptloc_string(s) -> int
  """
  return _ida_dbg.set_bptloc_string(*args)

def get_bptloc_string(*args):
  """
  get_bptloc_string(i) -> char const *
  """
  return _ida_dbg.get_bptloc_string(*args)
BPLT_ABS = _ida_dbg.BPLT_ABS
BPLT_REL = _ida_dbg.BPLT_REL
BPLT_SYM = _ida_dbg.BPLT_SYM
BPLT_SRC = _ida_dbg.BPLT_SRC
class bpt_location_t(object):
    """
    Proxy of C++ bpt_location_t class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    info = _swig_property(_ida_dbg.bpt_location_t_info_get, _ida_dbg.bpt_location_t_info_set)
    index = _swig_property(_ida_dbg.bpt_location_t_index_get, _ida_dbg.bpt_location_t_index_set)
    loctype = _swig_property(_ida_dbg.bpt_location_t_loctype_get, _ida_dbg.bpt_location_t_loctype_set)
    def type(self, *args):
        """
        type(self) -> bpt_loctype_t
        """
        return _ida_dbg.bpt_location_t_type(self, *args)

    def is_empty_path(self, *args):
        """
        is_empty_path(self) -> bool
        """
        return _ida_dbg.bpt_location_t_is_empty_path(self, *args)

    def path(self, *args):
        """
        path(self) -> char const *
        """
        return _ida_dbg.bpt_location_t_path(self, *args)

    def symbol(self, *args):
        """
        symbol(self) -> char const *
        """
        return _ida_dbg.bpt_location_t_symbol(self, *args)

    def lineno(self, *args):
        """
        lineno(self) -> int
        """
        return _ida_dbg.bpt_location_t_lineno(self, *args)

    def offset(self, *args):
        """
        offset(self) -> uval_t
        """
        return _ida_dbg.bpt_location_t_offset(self, *args)

    def ea(self, *args):
        """
        ea(self) -> ea_t
        """
        return _ida_dbg.bpt_location_t_ea(self, *args)

    def __init__(self, *args):
        """
        __init__(self) -> bpt_location_t
        """
        this = _ida_dbg.new_bpt_location_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_abs_bpt(self, *args):
        """
        set_abs_bpt(self, a)
        """
        return _ida_dbg.bpt_location_t_set_abs_bpt(self, *args)

    def set_src_bpt(self, *args):
        """
        set_src_bpt(self, fn, _lineno)
        """
        return _ida_dbg.bpt_location_t_set_src_bpt(self, *args)

    def set_sym_bpt(self, *args):
        """
        set_sym_bpt(self, _symbol, _offset=0)
        """
        return _ida_dbg.bpt_location_t_set_sym_bpt(self, *args)

    def set_rel_bpt(self, *args):
        """
        set_rel_bpt(self, mod, _offset)
        """
        return _ida_dbg.bpt_location_t_set_rel_bpt(self, *args)

    def compare(self, *args):
        """
        compare(self, r) -> int
        """
        return _ida_dbg.bpt_location_t_compare(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, r) -> bool
        """
        return _ida_dbg.bpt_location_t___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(self, r) -> bool
        """
        return _ida_dbg.bpt_location_t___ne__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, r) -> bool
        """
        return _ida_dbg.bpt_location_t___lt__(self, *args)

    def __gt__(self, *args):
        """
        __gt__(self, r) -> bool
        """
        return _ida_dbg.bpt_location_t___gt__(self, *args)

    def __le__(self, *args):
        """
        __le__(self, r) -> bool
        """
        return _ida_dbg.bpt_location_t___le__(self, *args)

    def __ge__(self, *args):
        """
        __ge__(self, r) -> bool
        """
        return _ida_dbg.bpt_location_t___ge__(self, *args)

    __swig_destroy__ = _ida_dbg.delete_bpt_location_t
    __del__ = lambda self : None;
bpt_location_t_swigregister = _ida_dbg.bpt_location_t_swigregister
bpt_location_t_swigregister(bpt_location_t)

class bpt_t(object):
    """
    Proxy of C++ bpt_t class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    cb = _swig_property(_ida_dbg.bpt_t_cb_get, _ida_dbg.bpt_t_cb_set)
    loc = _swig_property(_ida_dbg.bpt_t_loc_get, _ida_dbg.bpt_t_loc_set)
    ea = _swig_property(_ida_dbg.bpt_t_ea_get, _ida_dbg.bpt_t_ea_set)
    type = _swig_property(_ida_dbg.bpt_t_type_get, _ida_dbg.bpt_t_type_set)
    pass_count = _swig_property(_ida_dbg.bpt_t_pass_count_get, _ida_dbg.bpt_t_pass_count_set)
    flags = _swig_property(_ida_dbg.bpt_t_flags_get, _ida_dbg.bpt_t_flags_set)
    props = _swig_property(_ida_dbg.bpt_t_props_get, _ida_dbg.bpt_t_props_set)
    size = _swig_property(_ida_dbg.bpt_t_size_get, _ida_dbg.bpt_t_size_set)
    cndidx = _swig_property(_ida_dbg.bpt_t_cndidx_get, _ida_dbg.bpt_t_cndidx_set)
    def __init__(self, *args):
        """
        __init__(self) -> bpt_t
        """
        this = _ida_dbg.new_bpt_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def is_hwbpt(self, *args):
        """
        is_hwbpt(self) -> bool
        """
        return _ida_dbg.bpt_t_is_hwbpt(self, *args)

    def enabled(self, *args):
        """
        enabled(self) -> bool
        """
        return _ida_dbg.bpt_t_enabled(self, *args)

    def is_low_level(self, *args):
        """
        is_low_level(self) -> bool
        """
        return _ida_dbg.bpt_t_is_low_level(self, *args)

    def badbpt(self, *args):
        """
        badbpt(self) -> bool
        """
        return _ida_dbg.bpt_t_badbpt(self, *args)

    def listbpt(self, *args):
        """
        listbpt(self) -> bool
        """
        return _ida_dbg.bpt_t_listbpt(self, *args)

    def is_compiled(self, *args):
        """
        is_compiled(self) -> bool
        """
        return _ida_dbg.bpt_t_is_compiled(self, *args)

    def is_active(self, *args):
        """
        is_active(self) -> bool
        """
        return _ida_dbg.bpt_t_is_active(self, *args)

    def is_partially_active(self, *args):
        """
        is_partially_active(self) -> bool
        """
        return _ida_dbg.bpt_t_is_partially_active(self, *args)

    def is_inactive(self, *args):
        """
        is_inactive(self) -> bool
        """
        return _ida_dbg.bpt_t_is_inactive(self, *args)

    def is_page_bpt(self, *args):
        """
        is_page_bpt(self) -> bool
        """
        return _ida_dbg.bpt_t_is_page_bpt(self, *args)

    def get_size(self, *args):
        """
        get_size(self) -> int
        """
        return _ida_dbg.bpt_t_get_size(self, *args)

    def set_abs_bpt(self, *args):
        """
        set_abs_bpt(self, a)
        """
        return _ida_dbg.bpt_t_set_abs_bpt(self, *args)

    def set_src_bpt(self, *args):
        """
        set_src_bpt(self, fn, lineno)
        """
        return _ida_dbg.bpt_t_set_src_bpt(self, *args)

    def set_sym_bpt(self, *args):
        """
        set_sym_bpt(self, sym, o)
        """
        return _ida_dbg.bpt_t_set_sym_bpt(self, *args)

    def set_rel_bpt(self, *args):
        """
        set_rel_bpt(self, mod, o)
        """
        return _ida_dbg.bpt_t_set_rel_bpt(self, *args)

    def is_absbpt(self, *args):
        """
        is_absbpt(self) -> bool
        """
        return _ida_dbg.bpt_t_is_absbpt(self, *args)

    def is_relbpt(self, *args):
        """
        is_relbpt(self) -> bool
        """
        return _ida_dbg.bpt_t_is_relbpt(self, *args)

    def is_symbpt(self, *args):
        """
        is_symbpt(self) -> bool
        """
        return _ida_dbg.bpt_t_is_symbpt(self, *args)

    def is_srcbpt(self, *args):
        """
        is_srcbpt(self) -> bool
        """
        return _ida_dbg.bpt_t_is_srcbpt(self, *args)

    def is_tracemodebpt(self, *args):
        """
        is_tracemodebpt(self) -> bool
        """
        return _ida_dbg.bpt_t_is_tracemodebpt(self, *args)

    def is_traceonbpt(self, *args):
        """
        is_traceonbpt(self) -> bool
        """
        return _ida_dbg.bpt_t_is_traceonbpt(self, *args)

    def is_traceoffbpt(self, *args):
        """
        is_traceoffbpt(self) -> bool
        """
        return _ida_dbg.bpt_t_is_traceoffbpt(self, *args)

    def set_trace_action(self, *args):
        """
        set_trace_action(self, enable, trace_types) -> bool
        """
        return _ida_dbg.bpt_t_set_trace_action(self, *args)

    def get_cnd_elang_idx(self, *args):
        """
        get_cnd_elang_idx(self) -> size_t
        """
        return _ida_dbg.bpt_t_get_cnd_elang_idx(self, *args)

    condition = _swig_property(_ida_dbg.bpt_t_condition_get, _ida_dbg.bpt_t_condition_set)
    elang = _swig_property(_ida_dbg.bpt_t_elang_get, _ida_dbg.bpt_t_elang_set)
    __swig_destroy__ = _ida_dbg.delete_bpt_t
    __del__ = lambda self : None;
bpt_t_swigregister = _ida_dbg.bpt_t_swigregister
bpt_t_swigregister(bpt_t)
BPT_BRK = _ida_dbg.BPT_BRK
BPT_TRACE = _ida_dbg.BPT_TRACE
BPT_UPDMEM = _ida_dbg.BPT_UPDMEM
BPT_ENABLED = _ida_dbg.BPT_ENABLED
BPT_LOWCND = _ida_dbg.BPT_LOWCND
BPT_TRACEON = _ida_dbg.BPT_TRACEON
BPT_TRACE_INSN = _ida_dbg.BPT_TRACE_INSN
BPT_TRACE_FUNC = _ida_dbg.BPT_TRACE_FUNC
BPT_TRACE_BBLK = _ida_dbg.BPT_TRACE_BBLK
BPT_TRACE_TYPES = _ida_dbg.BPT_TRACE_TYPES
BPT_ELANG_MASK = _ida_dbg.BPT_ELANG_MASK
BPT_ELANG_SHIFT = _ida_dbg.BPT_ELANG_SHIFT
BKPT_BADBPT = _ida_dbg.BKPT_BADBPT
BKPT_LISTBPT = _ida_dbg.BKPT_LISTBPT
BKPT_TRACE = _ida_dbg.BKPT_TRACE
BKPT_ACTIVE = _ida_dbg.BKPT_ACTIVE
BKPT_PARTIAL = _ida_dbg.BKPT_PARTIAL
BKPT_CNDREADY = _ida_dbg.BKPT_CNDREADY
BKPT_FAKEPEND = _ida_dbg.BKPT_FAKEPEND
BKPT_PAGE = _ida_dbg.BKPT_PAGE

MOVBPT_OK = _ida_dbg.MOVBPT_OK
MOVBPT_NOT_FOUND = _ida_dbg.MOVBPT_NOT_FOUND
MOVBPT_DEST_BUSY = _ida_dbg.MOVBPT_DEST_BUSY
MOVBPT_BAD_TYPE = _ida_dbg.MOVBPT_BAD_TYPE
tev_none = _ida_dbg.tev_none
tev_insn = _ida_dbg.tev_insn
tev_call = _ida_dbg.tev_call
tev_ret = _ida_dbg.tev_ret
tev_bpt = _ida_dbg.tev_bpt
tev_mem = _ida_dbg.tev_mem
tev_event = _ida_dbg.tev_event
tev_max = _ida_dbg.tev_max
class tev_info_t(object):
    """
    Proxy of C++ tev_info_t class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    type = _swig_property(_ida_dbg.tev_info_t_type_get, _ida_dbg.tev_info_t_type_set)
    tid = _swig_property(_ida_dbg.tev_info_t_tid_get, _ida_dbg.tev_info_t_tid_set)
    ea = _swig_property(_ida_dbg.tev_info_t_ea_get, _ida_dbg.tev_info_t_ea_set)
    def __init__(self, *args):
        """
        __init__(self) -> tev_info_t
        """
        this = _ida_dbg.new_tev_info_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_dbg.delete_tev_info_t
    __del__ = lambda self : None;
tev_info_t_swigregister = _ida_dbg.tev_info_t_swigregister
tev_info_t_swigregister(tev_info_t)

class memreg_info_t(object):
    """
    Proxy of C++ memreg_info_t class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ea = _swig_property(_ida_dbg.memreg_info_t_ea_get, _ida_dbg.memreg_info_t_ea_set)
    def get_bytes(self, *args):
        """
        get_bytes(self) -> PyObject *
        """
        return _ida_dbg.memreg_info_t_get_bytes(self, *args)

    bytes = property(get_bytes)

    def __init__(self, *args):
        """
        __init__(self) -> memreg_info_t
        """
        this = _ida_dbg.new_memreg_info_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ida_dbg.delete_memreg_info_t
    __del__ = lambda self : None;
memreg_info_t_swigregister = _ida_dbg.memreg_info_t_swigregister
memreg_info_t_swigregister(memreg_info_t)

DEC_NOTASK = _ida_dbg.DEC_NOTASK
DEC_ERROR = _ida_dbg.DEC_ERROR
DEC_TIMEOUT = _ida_dbg.DEC_TIMEOUT

def wait_for_next_event(*args):
  """
  wait_for_next_event(wfne, timeout_in_secs) -> dbg_event_code_t
  """
  return _ida_dbg.wait_for_next_event(*args)
WFNE_ANY = _ida_dbg.WFNE_ANY
WFNE_SUSP = _ida_dbg.WFNE_SUSP
WFNE_SILENT = _ida_dbg.WFNE_SILENT
WFNE_CONT = _ida_dbg.WFNE_CONT
WFNE_NOWAIT = _ida_dbg.WFNE_NOWAIT
WFNE_USEC = _ida_dbg.WFNE_USEC

def get_debug_event(*args):
  """
  get_debug_event() -> debug_event_t
  """
  return _ida_dbg.get_debug_event(*args)

def set_debugger_options(*args):
  """
  set_debugger_options(options) -> uint
  """
  return _ida_dbg.set_debugger_options(*args)
DOPT_SEGM_MSGS = _ida_dbg.DOPT_SEGM_MSGS
DOPT_START_BPT = _ida_dbg.DOPT_START_BPT
DOPT_THREAD_MSGS = _ida_dbg.DOPT_THREAD_MSGS
DOPT_THREAD_BPT = _ida_dbg.DOPT_THREAD_BPT
DOPT_BPT_MSGS = _ida_dbg.DOPT_BPT_MSGS
DOPT_LIB_MSGS = _ida_dbg.DOPT_LIB_MSGS
DOPT_LIB_BPT = _ida_dbg.DOPT_LIB_BPT
DOPT_INFO_MSGS = _ida_dbg.DOPT_INFO_MSGS
DOPT_INFO_BPT = _ida_dbg.DOPT_INFO_BPT
DOPT_REAL_MEMORY = _ida_dbg.DOPT_REAL_MEMORY
DOPT_REDO_STACK = _ida_dbg.DOPT_REDO_STACK
DOPT_ENTRY_BPT = _ida_dbg.DOPT_ENTRY_BPT
DOPT_EXCDLG = _ida_dbg.DOPT_EXCDLG
EXCDLG_NEVER = _ida_dbg.EXCDLG_NEVER
EXCDLG_UNKNOWN = _ida_dbg.EXCDLG_UNKNOWN
EXCDLG_ALWAYS = _ida_dbg.EXCDLG_ALWAYS
DOPT_LOAD_DINFO = _ida_dbg.DOPT_LOAD_DINFO
DOPT_END_BPT = _ida_dbg.DOPT_END_BPT
DOPT_TEMP_HWBPT = _ida_dbg.DOPT_TEMP_HWBPT

def set_remote_debugger(*args):
  """
  set_remote_debugger(host, _pass, port=-1)
  """
  return _ida_dbg.set_remote_debugger(*args)

def get_process_options(*args):
  """
  get_process_options(path, args, sdir, host, _pass, port)
  """
  return _ida_dbg.get_process_options(*args)

def set_process_options(*args):
  """
  set_process_options(path, args, sdir, host, _pass, port)
  """
  return _ida_dbg.set_process_options(*args)

def retrieve_exceptions(*args):
  """
  retrieve_exceptions() -> excvec_t
  """
  return _ida_dbg.retrieve_exceptions(*args)

def store_exceptions(*args):
  """
  store_exceptions() -> bool
  """
  return _ida_dbg.store_exceptions(*args)

def define_exception(*args):
  """
  define_exception(code, name, desc, flags) -> char const *
  """
  return _ida_dbg.define_exception(*args)

def have_set_options(*args):
  """
  have_set_options(_dbg) -> bool
  """
  return _ida_dbg.have_set_options(*args)

def set_dbg_options(*args):
  """
    set_dbg_options(_dbg, keyword, pri, value_type, value) -> char const
    set_dbg_options(keyword, pri, value_type, value) -> char const *
    """
  return _ida_dbg.set_dbg_options(*args)

def set_dbg_default_options(*args):
  """
  set_dbg_default_options(keyword, value_type, value) -> char const *
  """
  return _ida_dbg.set_dbg_default_options(*args)

def set_int_dbg_options(*args):
  """
  set_int_dbg_options(keyword, value) -> char const *
  """
  return _ida_dbg.set_int_dbg_options(*args)
class eval_ctx_t(object):
    """
    Proxy of C++ eval_ctx_t class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args):
        """
        __init__(self, _ea) -> eval_ctx_t
        """
        this = _ida_dbg.new_eval_ctx_t(*args)
        try: self.this.append(this)
        except: self.this = this
    ea = _swig_property(_ida_dbg.eval_ctx_t_ea_get, _ida_dbg.eval_ctx_t_ea_set)
    __swig_destroy__ = _ida_dbg.delete_eval_ctx_t
    __del__ = lambda self : None;
eval_ctx_t_swigregister = _ida_dbg.eval_ctx_t_swigregister
eval_ctx_t_swigregister(eval_ctx_t)

SRCIT_NONE = _ida_dbg.SRCIT_NONE
SRCIT_MODULE = _ida_dbg.SRCIT_MODULE
SRCIT_FUNC = _ida_dbg.SRCIT_FUNC
SRCIT_STMT = _ida_dbg.SRCIT_STMT
SRCIT_EXPR = _ida_dbg.SRCIT_EXPR
SRCIT_STTVAR = _ida_dbg.SRCIT_STTVAR
SRCIT_LOCVAR = _ida_dbg.SRCIT_LOCVAR
SRCDBG_PROV_VERSION = _ida_dbg.SRCDBG_PROV_VERSION

def create_source_viewer(*args):
  """
  create_source_viewer(out_ccv, parent, custview, sf, lines, lnnum, colnum, flags) -> source_view_t *
  """
  return _ida_dbg.create_source_viewer(*args)

def get_dbg_byte(*args):
  """
  get_dbg_byte(x, ea) -> bool
  """
  return _ida_dbg.get_dbg_byte(*args)

def put_dbg_byte(*args):
  """
  put_dbg_byte(ea, x) -> bool
  """
  return _ida_dbg.put_dbg_byte(*args)

def invalidate_dbgmem_config(*args):
  """
  invalidate_dbgmem_config()
  """
  return _ida_dbg.invalidate_dbgmem_config(*args)

def invalidate_dbgmem_contents(*args):
  """
  invalidate_dbgmem_contents(ea, size)
  """
  return _ida_dbg.invalidate_dbgmem_contents(*args)

def is_debugger_on(*args):
  """
  is_debugger_on() -> bool
  """
  return _ida_dbg.is_debugger_on(*args)

def is_debugger_memory(*args):
  """
  is_debugger_memory(ea) -> bool
  """
  return _ida_dbg.is_debugger_memory(*args)

def run_requests(*args):
  """
  run_requests() -> bool
  """
  return _ida_dbg.run_requests(*args)

def get_running_request(*args):
  """
  get_running_request() -> ui_notification_t
  """
  return _ida_dbg.get_running_request(*args)

def get_running_notification(*args):
  """
  get_running_notification() -> dbg_notification_t
  """
  return _ida_dbg.get_running_notification(*args)

def clear_requests_queue(*args):
  """
  clear_requests_queue()
  """
  return _ida_dbg.clear_requests_queue(*args)

def get_process_state(*args):
  """
  get_process_state() -> int
  """
  return _ida_dbg.get_process_state(*args)

def start_process(*args):
  """
  start_process(path, args, sdir) -> int
  """
  return _ida_dbg.start_process(*args)

def request_start_process(*args):
  """
  request_start_process(path, args, sdir) -> int
  """
  return _ida_dbg.request_start_process(*args)

def suspend_process(*args):
  """
  suspend_process() -> bool
  """
  return _ida_dbg.suspend_process(*args)

def request_suspend_process(*args):
  """
  request_suspend_process() -> bool
  """
  return _ida_dbg.request_suspend_process(*args)

def continue_process(*args):
  """
  continue_process() -> bool
  """
  return _ida_dbg.continue_process(*args)

def request_continue_process(*args):
  """
  request_continue_process() -> bool
  """
  return _ida_dbg.request_continue_process(*args)

def exit_process(*args):
  """
  exit_process() -> bool
  """
  return _ida_dbg.exit_process(*args)

def request_exit_process(*args):
  """
  request_exit_process() -> bool
  """
  return _ida_dbg.request_exit_process(*args)

def get_processes(*args):
  """
  get_processes(proclist) -> ssize_t
  """
  return _ida_dbg.get_processes(*args)

def attach_process(*args):
  """
  attach_process(pid, event_id) -> int
  """
  return _ida_dbg.attach_process(*args)

def request_attach_process(*args):
  """
  request_attach_process(pid, event_id) -> int
  """
  return _ida_dbg.request_attach_process(*args)

def detach_process(*args):
  """
  detach_process() -> bool
  """
  return _ida_dbg.detach_process(*args)

def request_detach_process(*args):
  """
  request_detach_process() -> bool
  """
  return _ida_dbg.request_detach_process(*args)

def get_thread_qty(*args):
  """
  get_thread_qty() -> int
  """
  return _ida_dbg.get_thread_qty(*args)

def getn_thread(*args):
  """
  getn_thread(n) -> thid_t
  """
  return _ida_dbg.getn_thread(*args)

def select_thread(*args):
  """
  select_thread(tid) -> bool
  """
  return _ida_dbg.select_thread(*args)

def request_select_thread(*args):
  """
  request_select_thread(tid) -> bool
  """
  return _ida_dbg.request_select_thread(*args)

def set_resume_mode(*args):
  """
  set_resume_mode(tid, mode) -> bool
  """
  return _ida_dbg.set_resume_mode(*args)

def request_set_resume_mode(*args):
  """
  request_set_resume_mode(tid, mode) -> bool
  """
  return _ida_dbg.request_set_resume_mode(*args)

def step_into(*args):
  """
  step_into() -> bool
  """
  return _ida_dbg.step_into(*args)

def request_step_into(*args):
  """
  request_step_into() -> bool
  """
  return _ida_dbg.request_step_into(*args)

def step_over(*args):
  """
  step_over() -> bool
  """
  return _ida_dbg.step_over(*args)

def request_step_over(*args):
  """
  request_step_over() -> bool
  """
  return _ida_dbg.request_step_over(*args)

def run_to(*args):
  """
  run_to(ea) -> bool
  """
  return _ida_dbg.run_to(*args)

def request_run_to(*args):
  """
  request_run_to(ea) -> bool
  """
  return _ida_dbg.request_run_to(*args)

def step_until_ret(*args):
  """
  step_until_ret() -> bool
  """
  return _ida_dbg.step_until_ret(*args)

def request_step_until_ret(*args):
  """
  request_step_until_ret() -> bool
  """
  return _ida_dbg.request_step_until_ret(*args)

def get_sp_val(*args):
  """
  get_sp_val() -> bool
  """
  return _ida_dbg.get_sp_val(*args)

def get_ip_val(*args):
  """
  get_ip_val() -> bool
  """
  return _ida_dbg.get_ip_val(*args)

def get_reg_val(*args):
  """
  get_reg_val(regname, regval) -> bool
  """
  return _ida_dbg.get_reg_val(*args)

def request_set_reg_val(*args):
  """
  request_set_reg_val(regname, regval) -> bool
  """
  return _ida_dbg.request_set_reg_val(*args)

def get_bpt_qty(*args):
  """
  get_bpt_qty() -> int
  """
  return _ida_dbg.get_bpt_qty(*args)

def getn_bpt(*args):
  """
  getn_bpt(n, bpt) -> bool
  """
  return _ida_dbg.getn_bpt(*args)

def get_bpt(*args):
  """
  get_bpt(ea, bpt) -> bool
  """
  return _ida_dbg.get_bpt(*args)

def find_bpt(*args):
  """
  find_bpt(bptloc, bpt) -> bool
  """
  return _ida_dbg.find_bpt(*args)

def add_bpt(*args):
  """
    add_bpt(ea, size, type) -> bool
    add_bpt(bpt) -> bool
    """
  return _ida_dbg.add_bpt(*args)

def request_add_bpt(*args):
  """
    request_add_bpt(ea, size, type) -> bool
    request_add_bpt(bpt) -> bool
    """
  return _ida_dbg.request_add_bpt(*args)

def del_bpt(*args):
  """
    del_bpt(ea) -> bool
    del_bpt(bptloc) -> bool
    """
  return _ida_dbg.del_bpt(*args)

def request_del_bpt(*args):
  """
    request_del_bpt(ea) -> bool
    request_del_bpt(bptloc) -> bool
    """
  return _ida_dbg.request_del_bpt(*args)

def update_bpt(*args):
  """
  update_bpt(bpt) -> bool
  """
  return _ida_dbg.update_bpt(*args)

def enable_bpt(*args):
  """
    enable_bpt(ea, enable) -> bool
    enable_bpt(bptloc, enable) -> bool
    """
  return _ida_dbg.enable_bpt(*args)

def request_enable_bpt(*args):
  """
    request_enable_bpt(ea, enable) -> bool
    request_enable_bpt(bptloc, enable) -> bool
    """
  return _ida_dbg.request_enable_bpt(*args)

def set_trace_size(*args):
  """
  set_trace_size(size) -> bool
  """
  return _ida_dbg.set_trace_size(*args)

def clear_trace(*args):
  """
  clear_trace()
  """
  return _ida_dbg.clear_trace(*args)

def request_clear_trace(*args):
  """
  request_clear_trace()
  """
  return _ida_dbg.request_clear_trace(*args)

def is_step_trace_enabled(*args):
  """
  is_step_trace_enabled() -> bool
  """
  return _ida_dbg.is_step_trace_enabled(*args)

def enable_step_trace(*args):
  """
  enable_step_trace(enable) -> bool
  """
  return _ida_dbg.enable_step_trace(*args)

def request_enable_step_trace(*args):
  """
  request_enable_step_trace(enable) -> bool
  """
  return _ida_dbg.request_enable_step_trace(*args)

def get_step_trace_options(*args):
  """
  get_step_trace_options() -> int
  """
  return _ida_dbg.get_step_trace_options(*args)

def set_step_trace_options(*args):
  """
  set_step_trace_options(options)
  """
  return _ida_dbg.set_step_trace_options(*args)

def request_set_step_trace_options(*args):
  """
  request_set_step_trace_options(options)
  """
  return _ida_dbg.request_set_step_trace_options(*args)

def is_insn_trace_enabled(*args):
  """
  is_insn_trace_enabled() -> bool
  """
  return _ida_dbg.is_insn_trace_enabled(*args)

def enable_insn_trace(*args):
  """
  enable_insn_trace(enable) -> bool
  """
  return _ida_dbg.enable_insn_trace(*args)

def request_enable_insn_trace(*args):
  """
  request_enable_insn_trace(enable) -> bool
  """
  return _ida_dbg.request_enable_insn_trace(*args)

def get_insn_trace_options(*args):
  """
  get_insn_trace_options() -> int
  """
  return _ida_dbg.get_insn_trace_options(*args)

def set_insn_trace_options(*args):
  """
  set_insn_trace_options(options)
  """
  return _ida_dbg.set_insn_trace_options(*args)

def request_set_insn_trace_options(*args):
  """
  request_set_insn_trace_options(options)
  """
  return _ida_dbg.request_set_insn_trace_options(*args)

def is_func_trace_enabled(*args):
  """
  is_func_trace_enabled() -> bool
  """
  return _ida_dbg.is_func_trace_enabled(*args)

def enable_func_trace(*args):
  """
  enable_func_trace(enable) -> bool
  """
  return _ida_dbg.enable_func_trace(*args)

def request_enable_func_trace(*args):
  """
  request_enable_func_trace(enable) -> bool
  """
  return _ida_dbg.request_enable_func_trace(*args)

def get_func_trace_options(*args):
  """
  get_func_trace_options() -> int
  """
  return _ida_dbg.get_func_trace_options(*args)

def set_func_trace_options(*args):
  """
  set_func_trace_options(options)
  """
  return _ida_dbg.set_func_trace_options(*args)

def request_set_func_trace_options(*args):
  """
  request_set_func_trace_options(options)
  """
  return _ida_dbg.request_set_func_trace_options(*args)

def set_highlight_trace_options(*args):
  """
  set_highlight_trace_options(hilight, color, diff)
  """
  return _ida_dbg.set_highlight_trace_options(*args)

def is_bblk_trace_enabled(*args):
  """
  is_bblk_trace_enabled() -> bool
  """
  return _ida_dbg.is_bblk_trace_enabled(*args)

def enable_bblk_trace(*args):
  """
  enable_bblk_trace(enable) -> bool
  """
  return _ida_dbg.enable_bblk_trace(*args)

def request_enable_bblk_trace(*args):
  """
  request_enable_bblk_trace(enable) -> bool
  """
  return _ida_dbg.request_enable_bblk_trace(*args)

def get_bblk_trace_options(*args):
  """
  get_bblk_trace_options() -> int
  """
  return _ida_dbg.get_bblk_trace_options(*args)

def set_bblk_trace_options(*args):
  """
  set_bblk_trace_options(options)
  """
  return _ida_dbg.set_bblk_trace_options(*args)

def request_set_bblk_trace_options(*args):
  """
  request_set_bblk_trace_options(options)
  """
  return _ida_dbg.request_set_bblk_trace_options(*args)

def get_tev_qty(*args):
  """
  get_tev_qty() -> int
  """
  return _ida_dbg.get_tev_qty(*args)

def get_tev_info(*args):
  """
  get_tev_info(n, tev_info) -> bool
  """
  return _ida_dbg.get_tev_info(*args)

def get_insn_tev_reg_val(*args):
  """
  get_insn_tev_reg_val(n, regname, regval) -> bool
  """
  return _ida_dbg.get_insn_tev_reg_val(*args)

def get_insn_tev_reg_mem(*args):
  """
  get_insn_tev_reg_mem(n, memmap) -> bool
  """
  return _ida_dbg.get_insn_tev_reg_mem(*args)

def get_insn_tev_reg_result(*args):
  """
  get_insn_tev_reg_result(n, regname, regval) -> bool
  """
  return _ida_dbg.get_insn_tev_reg_result(*args)

def get_call_tev_callee(*args):
  """
  get_call_tev_callee(n) -> ea_t
  """
  return _ida_dbg.get_call_tev_callee(*args)

def get_ret_tev_return(*args):
  """
  get_ret_tev_return(n) -> ea_t
  """
  return _ida_dbg.get_ret_tev_return(*args)

def get_bpt_tev_ea(*args):
  """
  get_bpt_tev_ea(n) -> ea_t
  """
  return _ida_dbg.get_bpt_tev_ea(*args)

def get_tev_memory_info(*args):
  """
  get_tev_memory_info(n, mi) -> bool
  """
  return _ida_dbg.get_tev_memory_info(*args)

def get_tev_event(*args):
  """
  get_tev_event(n, d) -> bool
  """
  return _ida_dbg.get_tev_event(*args)

def get_tev_ea(*args):
  """
  get_tev_ea(n) -> ea_t
  """
  return _ida_dbg.get_tev_ea(*args)

def get_tev_type(*args):
  """
  get_tev_type(n) -> int
  """
  return _ida_dbg.get_tev_type(*args)

def get_tev_tid(*args):
  """
  get_tev_tid(n) -> int
  """
  return _ida_dbg.get_tev_tid(*args)

def get_trace_base_address(*args):
  """
  get_trace_base_address() -> ea_t
  """
  return _ida_dbg.get_trace_base_address(*args)

def load_trace_file(*args):
  """
  load_trace_file(filename) -> bool
  """
  return _ida_dbg.load_trace_file(*args)

def save_trace_file(*args):
  """
  save_trace_file(filename, description) -> bool
  """
  return _ida_dbg.save_trace_file(*args)

def is_valid_trace_file(*args):
  """
  is_valid_trace_file(filename) -> bool
  """
  return _ida_dbg.is_valid_trace_file(*args)

def set_trace_file_desc(*args):
  """
  set_trace_file_desc(filename, description) -> bool
  """
  return _ida_dbg.set_trace_file_desc(*args)

def get_trace_file_desc(*args):
  """
  get_trace_file_desc(filename) -> bool
  """
  return _ida_dbg.get_trace_file_desc(*args)

def choose_trace_file(*args):
  """
  choose_trace_file() -> bool
  """
  return _ida_dbg.choose_trace_file(*args)

def set_trace_platform(*args):
  """
  set_trace_platform(platform)
  """
  return _ida_dbg.set_trace_platform(*args)

def get_trace_platform(*args):
  """
  get_trace_platform() -> char const *
  """
  return _ida_dbg.get_trace_platform(*args)

def graph_trace(*args):
  """
  graph_trace() -> bool
  """
  return _ida_dbg.graph_trace(*args)

def set_trace_base_address(*args):
  """
  set_trace_base_address(ea)
  """
  return _ida_dbg.set_trace_base_address(*args)

def dbg_add_thread(*args):
  """
  dbg_add_thread(tid)
  """
  return _ida_dbg.dbg_add_thread(*args)

def dbg_del_thread(*args):
  """
  dbg_del_thread(tid)
  """
  return _ida_dbg.dbg_del_thread(*args)

def dbg_add_tev(*args):
  """
  dbg_add_tev(type, tid, address)
  """
  return _ida_dbg.dbg_add_tev(*args)

def dbg_add_many_tevs(*args):
  """
  dbg_add_many_tevs(new_tevs) -> bool
  """
  return _ida_dbg.dbg_add_many_tevs(*args)

def dbg_add_insn_tev(*args):
  """
  dbg_add_insn_tev(tid, ea, save) -> bool
  """
  return _ida_dbg.dbg_add_insn_tev(*args)

def dbg_add_bpt_tev(*args):
  """
  dbg_add_bpt_tev(tid, ea, bp) -> bool
  """
  return _ida_dbg.dbg_add_bpt_tev(*args)

def dbg_add_call_tev(*args):
  """
  dbg_add_call_tev(tid, caller, callee)
  """
  return _ida_dbg.dbg_add_call_tev(*args)

def dbg_add_ret_tev(*args):
  """
  dbg_add_ret_tev(tid, ret_insn, return_to)
  """
  return _ida_dbg.dbg_add_ret_tev(*args)

def dbg_add_debug_event(*args):
  """
  dbg_add_debug_event(event)
  """
  return _ida_dbg.dbg_add_debug_event(*args)

def is_reg_integer(*args):
  """
  is_reg_integer(regname) -> bool
  """
  return _ida_dbg.is_reg_integer(*args)

def is_reg_float(*args):
  """
  is_reg_float(regname) -> bool
  """
  return _ida_dbg.is_reg_float(*args)

def is_reg_custom(*args):
  """
  is_reg_custom(regname) -> bool
  """
  return _ida_dbg.is_reg_custom(*args)

def get_first_module(*args):
  """
  get_first_module(modinfo) -> bool
  """
  return _ida_dbg.get_first_module(*args)

def get_next_module(*args):
  """
  get_next_module(modinfo) -> bool
  """
  return _ida_dbg.get_next_module(*args)

def bring_debugger_to_front(*args):
  """
  bring_debugger_to_front()
  """
  return _ida_dbg.bring_debugger_to_front(*args)

def get_current_thread(*args):
  """
  get_current_thread() -> thid_t
  """
  return _ida_dbg.get_current_thread(*args)

def get_debugger_event_cond(*args):
  """
  get_debugger_event_cond() -> char const *
  """
  return _ida_dbg.get_debugger_event_cond(*args)

def suspend_thread(*args):
  """
  suspend_thread(tid) -> int
  """
  return _ida_dbg.suspend_thread(*args)

def request_suspend_thread(*args):
  """
  request_suspend_thread(tid) -> int
  """
  return _ida_dbg.request_suspend_thread(*args)

def resume_thread(*args):
  """
  resume_thread(tid) -> int
  """
  return _ida_dbg.resume_thread(*args)

def request_resume_thread(*args):
  """
  request_resume_thread(tid) -> int
  """
  return _ida_dbg.request_resume_thread(*args)

def check_bpt(*args):
  """
  check_bpt(ea) -> int
  """
  return _ida_dbg.check_bpt(*args)

def set_process_state(*args):
  """
  set_process_state(newstate, p_thid, dbginv) -> int
  """
  return _ida_dbg.set_process_state(*args)

def edit_manual_regions(*args):
  """
  edit_manual_regions()
  """
  return _ida_dbg.edit_manual_regions(*args)

def enable_manual_regions(*args):
  """
  enable_manual_regions(enable)
  """
  return _ida_dbg.enable_manual_regions(*args)

def is_debugger_busy(*args):
  """
  is_debugger_busy() -> bool
  """
  return _ida_dbg.is_debugger_busy(*args)

def hide_all_bpts(*args):
  """
  hide_all_bpts() -> int
  """
  return _ida_dbg.hide_all_bpts(*args)

def handle_debug_event(*args):
  """
  handle_debug_event(ev, rqflags) -> int
  """
  return _ida_dbg.handle_debug_event(*args)

def add_virt_module(*args):
  """
  add_virt_module(mod) -> bool
  """
  return _ida_dbg.add_virt_module(*args)

def del_virt_module(*args):
  """
  del_virt_module(base) -> bool
  """
  return _ida_dbg.del_virt_module(*args)

def internal_ioctl(*args):
  """
  internal_ioctl(fn, buf, poutbuf, poutsize) -> int
  """
  return _ida_dbg.internal_ioctl(*args)

def read_dbg_memory(*args):
  """
  read_dbg_memory(ea, buffer, size) -> ssize_t
  """
  return _ida_dbg.read_dbg_memory(*args)

def write_dbg_memory(*args):
  """
  write_dbg_memory(ea, buffer, size) -> ssize_t
  """
  return _ida_dbg.write_dbg_memory(*args)

def get_reg_vals(*args):
  """
  get_reg_vals(tid, clsmask, values) -> int
  """
  return _ida_dbg.get_reg_vals(*args)

def set_reg_val(*args):
  """
    set_reg_val(regname, regval) -> bool
    set_reg_val(tid, regidx, value) -> int
    """
  return _ida_dbg.set_reg_val(*args)

def get_dbg_memory_info(*args):
  """
  get_dbg_memory_info(ranges) -> int
  """
  return _ida_dbg.get_dbg_memory_info(*args)

def set_bpt_group(*args):
  """
  set_bpt_group(bpt, grp_name)
  """
  return _ida_dbg.set_bpt_group(*args)

def set_bptloc_group(*args):
  """
  set_bptloc_group(bptloc, grp_name) -> bool
  """
  return _ida_dbg.set_bptloc_group(*args)

def get_bpt_group(*args):
  """
  get_bpt_group(bptloc) -> bool
  """
  return _ida_dbg.get_bpt_group(*args)

def rename_bptgrp(*args):
  """
  rename_bptgrp(old_name, new_name) -> bool
  """
  return _ida_dbg.rename_bptgrp(*args)

def del_bptgrp(*args):
  """
  del_bptgrp(name) -> bool
  """
  return _ida_dbg.del_bptgrp(*args)

def get_grp_bpts(*args):
  """
  get_grp_bpts(bpts, grp_name) -> ssize_t
  """
  return _ida_dbg.get_grp_bpts(*args)

def get_manual_regions(*args):
  """
  get_manual_regions() -> PyObject *


  Returns the manual memory regions
  @return: list(start_ea, end_ea, name, sclass, sbase, bitness, perm)
  """
  return _ida_dbg.get_manual_regions(*args)

def dbg_is_loaded(*args):
  """
  dbg_is_loaded() -> bool


  Checks if a debugger is loaded
  @return: Boolean
  """
  return _ida_dbg.dbg_is_loaded(*args)

def refresh_debugger_memory(*args):
  """
  refresh_debugger_memory() -> PyObject *


  Refreshes the debugger memory
  @return: Nothing
  """
  return _ida_dbg.refresh_debugger_memory(*args)
class DBG_Hooks(object):
    """
    Proxy of C++ DBG_Hooks class
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _ida_dbg.delete_DBG_Hooks
    __del__ = lambda self : None;
    def hook(self, *args):
        """
        hook(self) -> bool
        """
        return _ida_dbg.DBG_Hooks_hook(self, *args)

    def unhook(self, *args):
        """
        unhook(self) -> bool
        """
        return _ida_dbg.DBG_Hooks_unhook(self, *args)

    def dbg_process_start(self, *args):
        """
        dbg_process_start(self, pid, tid, ea, modinfo_name, modinfo_base, modinfo_size)
        """
        return _ida_dbg.DBG_Hooks_dbg_process_start(self, *args)

    def dbg_process_exit(self, *args):
        """
        dbg_process_exit(self, pid, tid, ea, exit_code)
        """
        return _ida_dbg.DBG_Hooks_dbg_process_exit(self, *args)

    def dbg_process_attach(self, *args):
        """
        dbg_process_attach(self, pid, tid, ea, modinfo_name, modinfo_base, modinfo_size)
        """
        return _ida_dbg.DBG_Hooks_dbg_process_attach(self, *args)

    def dbg_process_detach(self, *args):
        """
        dbg_process_detach(self, pid, tid, ea)
        """
        return _ida_dbg.DBG_Hooks_dbg_process_detach(self, *args)

    def dbg_thread_start(self, *args):
        """
        dbg_thread_start(self, pid, tid, ea)
        """
        return _ida_dbg.DBG_Hooks_dbg_thread_start(self, *args)

    def dbg_thread_exit(self, *args):
        """
        dbg_thread_exit(self, pid, tid, ea, exit_code)
        """
        return _ida_dbg.DBG_Hooks_dbg_thread_exit(self, *args)

    def dbg_library_load(self, *args):
        """
        dbg_library_load(self, pid, tid, ea, modinfo_name, modinfo_base, modinfo_size)
        """
        return _ida_dbg.DBG_Hooks_dbg_library_load(self, *args)

    def dbg_library_unload(self, *args):
        """
        dbg_library_unload(self, pid, tid, ea, info)
        """
        return _ida_dbg.DBG_Hooks_dbg_library_unload(self, *args)

    def dbg_information(self, *args):
        """
        dbg_information(self, pid, tid, ea, info)
        """
        return _ida_dbg.DBG_Hooks_dbg_information(self, *args)

    def dbg_exception(self, *args):
        """
        dbg_exception(self, pid, tid, ea, exc_code, exc_can_cont, exc_ea, exc_info) -> int
        """
        return _ida_dbg.DBG_Hooks_dbg_exception(self, *args)

    def dbg_suspend_process(self, *args):
        """
        dbg_suspend_process(self)
        """
        return _ida_dbg.DBG_Hooks_dbg_suspend_process(self, *args)

    def dbg_bpt(self, *args):
        """
        dbg_bpt(self, tid, bptea) -> int
        """
        return _ida_dbg.DBG_Hooks_dbg_bpt(self, *args)

    def dbg_trace(self, *args):
        """
        dbg_trace(self, tid, ip) -> int
        """
        return _ida_dbg.DBG_Hooks_dbg_trace(self, *args)

    def dbg_request_error(self, *args):
        """
        dbg_request_error(self, failed_command, failed_dbg_notification)
        """
        return _ida_dbg.DBG_Hooks_dbg_request_error(self, *args)

    def dbg_step_into(self, *args):
        """
        dbg_step_into(self)
        """
        return _ida_dbg.DBG_Hooks_dbg_step_into(self, *args)

    def dbg_step_over(self, *args):
        """
        dbg_step_over(self)
        """
        return _ida_dbg.DBG_Hooks_dbg_step_over(self, *args)

    def dbg_run_to(self, *args):
        """
        dbg_run_to(self, pid, tid, ea)
        """
        return _ida_dbg.DBG_Hooks_dbg_run_to(self, *args)

    def dbg_step_until_ret(self, *args):
        """
        dbg_step_until_ret(self)
        """
        return _ida_dbg.DBG_Hooks_dbg_step_until_ret(self, *args)

    def dbg_bpt_changed(self, *args):
        """
        dbg_bpt_changed(self, bptev_code, bpt)
        """
        return _ida_dbg.DBG_Hooks_dbg_bpt_changed(self, *args)

    def __init__(self, *args):
        """
        __init__(self) -> DBG_Hooks
        """
        if self.__class__ == DBG_Hooks:
            _self = None
        else:
            _self = self
        this = _ida_dbg.new_DBG_Hooks(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _ida_dbg.disown_DBG_Hooks(self)
        return weakref_proxy(self)
DBG_Hooks_swigregister = _ida_dbg.DBG_Hooks_swigregister
DBG_Hooks_swigregister(DBG_Hooks)


def list_bptgrps(*args):
  """
    list_bptgrps(bptgrps) -> size_t
    list_bptgrps() -> PyObject *
    """
  return _ida_dbg.list_bptgrps(*args)

def move_bpt_to_grp(*args):
  """
  move_bpt_to_grp(bpt, grp_name)


  Sets new group for the breakpoint
  """
  return _ida_dbg.move_bpt_to_grp(*args)

def internal_get_sreg_base(*args):
  """
  internal_get_sreg_base(tid, sreg_value) -> ea_t


  Get the sreg base, for the given thread.
  
  @return: The sreg base, or BADADDR on failure.
  """
  return _ida_dbg.internal_get_sreg_base(*args)
#<pycode(py_dbg)>
import ida_idd

def get_tev_reg_val(tev, reg):
    rv = ida_idd.regval_t()
    if get_insn_tev_reg_val(tev, reg, rv):
        if rv.rvtype == ida_idd.RVT_INT:
            return rv.ival

def get_tev_reg_mem_qty(tev):
    ti = tev_info_t()
    if get_tev_info(tev, ti):
        mis = memreg_infos_t()
        if get_insn_tev_reg_mem(tev, mis):
            return mis.size()

def get_tev_reg_mem(tev, idx):
    mis = memreg_infos_t()
    if get_insn_tev_reg_mem(tev, mis):
        if idx < mis.size():
            return mis[idx].bytes

def get_tev_reg_mem_ea(tev, idx):
    ti = tev_info_t()
    if get_tev_info(tev, ti):
        mis = memreg_infos_t()
        if get_insn_tev_reg_mem(tev, mis):
            if idx >= 0 and idx < mis.size():
                return mis[idx].ea
#</pycode(py_dbg)>

if _BC695:
    import ida_idd
    @bc695redef
    def get_process_info(n, pi):
        pis = ida_idd.procinfo_vec_t()
        cnt = get_processes(pis)
        if n >= cnt:
            return ida_idd.NO_PROCESS
        pi.name = pis[n].name
        pi.pid = pis[n].pid
        return pi.pid
    @bc695redef
    def get_process_qty():
        pis = ida_idd.procinfo_vec_t()
        return get_processes(pis)




