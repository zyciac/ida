# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""
IDA Plugin SDK API wrapper: problems
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ida_problems', [dirname(__file__)])
        except ImportError:
            import _ida_problems
            return _ida_problems
        if fp is not None:
            try:
                _mod = imp.load_module('_ida_problems', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ida_problems = swig_import_helper()
    del swig_import_helper
else:
    import _ida_problems
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


import ida_idaapi

import sys
_BC695 = sys.modules["__main__"].IDAPYTHON_COMPAT_695_API

if _BC695:






    def bc695redef(func):
        func.func_dict["bc695redef"] = True
        return func


def get_problem_desc(*args):
  """
  get_problem_desc(t, ea) -> ssize_t
  """
  return _ida_problems.get_problem_desc(*args)

def remember_problem(*args):
  """
  remember_problem(type, ea, msg=None)
  """
  return _ida_problems.remember_problem(*args)

def get_problem(*args):
  """
  get_problem(type, lowea) -> ea_t
  """
  return _ida_problems.get_problem(*args)

def forget_problem(*args):
  """
  forget_problem(type, ea) -> bool
  """
  return _ida_problems.forget_problem(*args)

def get_problem_name(*args):
  """
  get_problem_name(type, longname=True) -> char const *
  """
  return _ida_problems.get_problem_name(*args)

def is_problem_present(*args):
  """
  is_problem_present(t, ea) -> bool
  """
  return _ida_problems.is_problem_present(*args)

def was_ida_decision(*args):
  """
  was_ida_decision(ea) -> bool
  """
  return _ida_problems.was_ida_decision(*args)
if _BC695:
    import sys
    sys.modules["ida_queue"] = sys.modules["ida_problems"]
    Q_Qnum=_ida_problems.cvar.PR_END
    Q_att=_ida_problems.cvar.PR_ATTN
    Q_badstack=_ida_problems.cvar.PR_BADSTACK
    Q_collsn=_ida_problems.cvar.PR_COLLISION
    Q_decimp=_ida_problems.cvar.PR_DECIMP
    Q_disasm=_ida_problems.cvar.PR_DISASM
    Q_final=_ida_problems.cvar.PR_FINAL
    Q_head=_ida_problems.cvar.PR_HEAD
    Q_jumps=_ida_problems.cvar.PR_JUMP
    Q_lines=_ida_problems.cvar.PR_MANYLINES
    Q_noBase=_ida_problems.cvar.PR_NOBASE
    Q_noComm=_ida_problems.cvar.PR_NOCMT
    Q_noFop=_ida_problems.cvar.PR_NOFOP
    Q_noName=_ida_problems.cvar.PR_NONAME
    Q_noRef=_ida_problems.cvar.PR_NOXREFS
    Q_noValid=_ida_problems.cvar.PR_ILLADDR
    Q_rolled=_ida_problems.cvar.PR_ROLLED
    QueueDel=forget_problem
    QueueGetMessage=get_problem_desc
    QueueGetType=get_problem
    QueueIsPresent=is_problem_present
    QueueSet=remember_problem
    @bc695redef
    def get_long_queue_name(t):
        return get_problem_name(t, True)
    @bc695redef
    def get_short_queue_name(t):
        return get_problem_name(t, False)



cvar = _ida_problems.cvar
PR_NOBASE = cvar.PR_NOBASE
PR_NONAME = cvar.PR_NONAME
PR_NOFOP = cvar.PR_NOFOP
PR_NOCMT = cvar.PR_NOCMT
PR_NOXREFS = cvar.PR_NOXREFS
PR_JUMP = cvar.PR_JUMP
PR_DISASM = cvar.PR_DISASM
PR_HEAD = cvar.PR_HEAD
PR_ILLADDR = cvar.PR_ILLADDR
PR_MANYLINES = cvar.PR_MANYLINES
PR_BADSTACK = cvar.PR_BADSTACK
PR_ATTN = cvar.PR_ATTN
PR_FINAL = cvar.PR_FINAL
PR_ROLLED = cvar.PR_ROLLED
PR_COLLISION = cvar.PR_COLLISION
PR_DECIMP = cvar.PR_DECIMP
PR_END = cvar.PR_END

